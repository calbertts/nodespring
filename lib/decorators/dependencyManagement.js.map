{"version":3,"sources":["../../src/decorators/dependencyManagement.js"],"names":[],"mappings":"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","file":"dependencyManagement.js","sourcesContent":["/**\n * Dependency Management\n * @author calbertts\n */\n\nimport ModuleContainer from '../core/moduleContainer'\nimport path from 'path'\nimport Abstract from '../core/Abstract'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\nimport util from 'util'\n\n\nglobal.implContext = null\n\n\n/**\n * Enumeration to specify the scope type for implementations\n * @type {{SINGLETON: string, PROTOTYPE: string}}\n */\nexport var Scope = {\n  SINGLETON: 'singleton',\n  PROTOTYPE: 'prototype'\n}\n\n\n/**\n * Decorator to inject a dependency using an interface\n * @param typeToInject\n * @returns {Function}\n * @constructor\n */\nexport function Inject(typeToInject) {\n\n  let packagePath = NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', '')\n\n  console.log('packagePath', packagePath)\n\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let targetName = global.implContext ? global.implContext.packagePath : packagePath\n\n    let preConfiguredImpl = ModuleContainer.implConfig[targetName]\n\n    if(preConfiguredImpl) {\n      if(path.basename(packagePath) !== path.basename(preConfiguredImpl)) {\n        console.error('Ignored implementation from @Inject ' + packagePath)\n        return\n      }\n    }\n\n    if(typeToInject.moduleType === 'controller') {\n      throw new TypeError('You cannot inject a Controller as a dependency, please take a look on ' + targetName)\n    }\n\n    ModuleContainer.addDependency(targetName, property, typeToInject)\n  }\n}\n\n\n/**\n * Decorator to specify when a class implements a specific interface\n * @param type\n * @param scope\n * @returns {Function}\n * @constructor\n */\nexport function Implements(type, scope = Scope.SINGLETON) {\n  global.implContext = type\n\n  return (target, property, descriptor) => {\n    target.scope = scope\n    target.interfaceName = type.name\n    target.interfacePackagePath = type.packagePath\n    target.moduleType = 'implementation'\n\n    global.implContext = null\n\n    let preConfiguredImpl = ModuleContainer.implConfig[type.packagePath]\n\n    if(preConfiguredImpl) {\n      if(target.name !== path.basename(preConfiguredImpl)) {\n        NodeSpringUtil.error('Ignored implementation from @Implements ' + target.name)\n        return\n      }\n    }\n\n    //let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n    //let implMethods = Object.getOwnPropertyNames(target.prototype)\n\n    /*console.log(type.name)\n    console.log('interfaceMethods',interfaceMethods)\n    console.log('implMethods', implMethods)*/\n\n    /*class ImplementationWrapper {\n      //impl = new target()\n    }\n\n    implMethods.forEach((implMethod) => {\n      if(interfaceMethods.indexOf(implMethod) < 0) {\n        ImplementationWrapper.prototype[implMethod] = () => {\n          NodeSpringUtil.error('The method \"' + implMethod + '\", is not declared on the interface \"' + type.name + '\", so you cannot call it from here')\n        }\n      } else {\n        ImplementationWrapper.prototype[implMethod] = target.prototype[implMethod]\n      }\n    })*/\n\n    //console.log('target', target)\n    //console.log('ImplementationWrapper', ImplementationWrapper.prototype)\n\n    ModuleContainer.addImplementation(type, target)\n  }\n}\n\n\n/**\n * Decorator to specify a class is an interface\n * @param interfaceBase\n * @returns {MockedInterface}\n * @constructor\n */\nexport function Interface(interfaceBase) {\n  let packagePath = NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', '')\n\n  class MockedInterface extends Abstract {\n    static moduleType = 'interface'\n    static packagePath = packagePath\n\n    constructor() {\n      super()\n    }\n  }\n\n  Object.defineProperty(MockedInterface, 'name', {\n    value: interfaceBase.name,\n    configurable: true\n  })\n\n  let interfaceMethods = Object.getOwnPropertyNames(interfaceBase.prototype)\n\n  interfaceMethods.filter((methodName) => {\n    return methodName !== 'constructor'\n  }).forEach((method) => {\n    MockedInterface.prototype[method] = interfaceBase.prototype[method]\n  })\n\n  return MockedInterface\n}\n\n\n/**\n * Decorator to indicate a method which must be called after all dependencies are injected\n * @param target\n * @param property\n * @param descriptor\n * @constructor\n */\nexport function PostInject(target, property, descriptor) {\n  ModuleContainer.addPostInjectMethod(global.implContext.packagePath, property)\n}\n"]}