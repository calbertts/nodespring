{"version":3,"sources":["../../src/decorators/dependencyManagement.js"],"names":[],"mappings":";;;;;QAUgB;QAeA;QAcA;;;;AA/BhB,OAAO,WAAP,GAAqB,IAArB;;;;;;AAEO,SAAS,MAAT,CAAgB,YAAhB,EAA8B;;;;AAInC,SAAO,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AACvC,eAAW,QAAX,GAAsB,IAAtB,CADuC;;AAGvC,QAAI,aAAa,OAAO,WAAP,GAAqB,OAAO,WAAP,CAAmB,IAAnB,GAA0B,OAAO,WAAP,CAAmB,IAAnB;;;;AAHzB,oCAOvC,CAAgB,aAAhB,CAA8B,UAA9B,EAA0C,QAA1C,EAAoD,aAAa,IAAb,CAApD,CAPuC;GAAlC,CAJ4B;CAA9B;;AAeA,SAAS,UAAT,CAAoB,IAApB,EAA0B;AAC/B,SAAO,WAAP,GAAqB,IAArB;;;;AAD+B,SAKxB,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;;AAEvC,WAAO,aAAP,GAAuB,KAAK,IAAL,CAFgB;AAGvC,WAAO,WAAP,GAAqB,IAArB,CAHuC;;AAKvC,qCAAgB,iBAAhB,CAAkC,IAAlC,EAAwC,MAAxC,EALuC;GAAlC,CALwB;CAA1B;;AAcA,SAAS,SAAT,CAAmB,aAAnB,EAAkC;AACvC,MAAI,iBAAiB,UAAU,CAAV,CAAjB,CADmC;AAEvC,gBAAc,WAAd,GAA4B,IAA5B;;;;;;AAFuC,SAQhC,eAAe,SAAf,CAAyB,WAAzB,CARgC;CAAlC","file":"dependencyManagement.js","sourcesContent":["/**\n * Dependency Management\n *\n * @author calbertts\n */\n\nimport {ModuleContainer} from '../core/moduleContainer'\n\nglobal.implContext = null\n\nexport function Inject(typeToInject) {\n\n  //console.log('analizing dependency', typeToInject.name, ' for ', global.implContext ? global.implContext.name : 'bad')\n\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let targetName = global.implContext ? global.implContext.name : target.constructor.name\n\n    //console.log('executing dependency', typeToInject.name, ' for ', targetName)\n\n    ModuleContainer.addDependency(targetName, property, typeToInject.name)\n  }\n}\n\nexport function Implements(type) {\n  global.implContext = type\n\n  //console.log('analizing implementation', type.name)\n\n  return (target, property, descriptor) => {\n    //console.log('executing implementation', type.name, ' for ', target.name)\n    target.interfaceName = type.name\n    global.implContext = null\n\n    ModuleContainer.addImplementation(type, target)\n  }\n}\n\nexport function Interface(interfaceBase) {\n  let interfaceClass = arguments[0]\n  interfaceBase.isInterface = true\n\n  /*interfaceClass.prototype.constructor = new Function(interfaceClass.name, \" return function \" + interfaceClass.name + \"(){ \"+\n    \"throw TypeError('NodeSpring Error: Cannot construct \"+interfaceClass.name+\" instances directly, because it is an Interface')}\")\n  ()*/\n\n  return interfaceClass.prototype.constructor\n}"]}