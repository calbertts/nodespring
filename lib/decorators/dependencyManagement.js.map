{"version":3,"sources":["../../src/decorators/dependencyManagement.js"],"names":[],"mappings":";;;;;;QAqBgB;QAuBA;QAqBA;QAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvFhB,OAAO,WAAP,GAAqB,IAArB;;;;;;;;AASO,SAAS,MAAT,CAAgB,YAAhB,EAA8B;;AAEnC,SAAO,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AACvC,eAAW,QAAX,GAAsB,IAAtB,CADuC;;AAGvC,QAAI,aAAa,OAAO,WAAP,GAAqB,OAAO,WAAP,CAAmB,IAAnB,GAA0B,OAAO,WAAP,CAAmB,IAAnB,CAHzB;;AAKvC,QAAG,aAAa,UAAb,KAA4B,YAA5B,EAA0C;AAC3C,YAAM,IAAI,SAAJ,CAAc,2EAA2E,UAA3E,CAApB,CAD2C;KAA7C;;AAIA,8BAAgB,aAAhB,CAA8B,UAA9B,EAA0C,QAA1C,EAAoD,YAApD,EATuC;GAAlC,CAF4B;CAA9B;;;;;;;;;AAuBA,SAAS,UAAT,CAAoB,IAApB,EAA+C;MAArB,8DAAQ,2BAAa;;AACpD,SAAO,WAAP,GAAqB,IAArB,CADoD;;AAGpD,SAAO,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AACvC,WAAO,KAAP,GAAe,KAAf,CADuC;AAEvC,WAAO,aAAP,GAAuB,KAAK,IAAL,CAFgB;AAGvC,WAAO,UAAP,GAAoB,gBAApB,CAHuC;;AAKvC,WAAO,WAAP,GAAqB,IAArB,CALuC;;AAOvC,8BAAgB,iBAAhB,CAAkC,IAAlC,EAAwC,MAAxC,EAPuC;GAAlC,CAH6C;CAA/C;;;;;;;;AAqBA,SAAS,SAAT,CAAmB,aAAnB,EAAkC;AACvC,MAAI,iBAAiB,UAAU,CAAV,CAAjB,CADmC;AAEvC,gBAAc,UAAd,GAA2B,WAA3B,CAFuC;;MAIjC;;;AACJ,aADI,eACJ,GAAc;4BADV,iBACU;;oEADV,6BACU;KAAd;;WADI;wBAJiC;;AAUvC,SAAO,cAAP,CAAsB,eAAtB,EAAuC,MAAvC,EAA+C;AAC7C,WAAO,cAAc,IAAd;AACP,kBAAc,IAAd;GAFF,EAVuC;;AAevC,MAAI,mBAAmB,OAAO,mBAAP,CAA2B,cAAc,SAAd,CAA9C,CAfmC;;AAiBvC,mBAAiB,MAAjB,CAAwB,UAAC,UAAD,EAAgB;AACtC,WAAO,eAAe,aAAf,CAD+B;GAAhB,CAAxB,CAEG,OAFH,CAEW,UAAC,MAAD,EAAY;AACrB,oBAAgB,SAAhB,CAA0B,MAA1B,IAAoC,cAAc,SAAd,CAAwB,MAAxB,CAApC,CADqB;GAAZ,CAFX,CAjBuC;;AAuBvC,SAAO,eAAP,CAvBuC;CAAlC;;;;;;;;;AAkCA,SAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,EAAsC,UAAtC,EAAkD;AACvD,4BAAgB,mBAAhB,CAAoC,OAAO,WAAP,CAAmB,IAAnB,EAAyB,QAA7D,EADuD;CAAlD;;;;;;AASA,IAAI,wBAAQ;AACjB,aAAW,WAAX;AACA,aAAW,WAAX;CAFS","file":"dependencyManagement.js","sourcesContent":["/**\n * Dependency Management\n * @author calbertts\n */\n\nimport ModuleContainer from '../core/moduleContainer'\nimport Abstract from '../core/Abstract'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\nimport util from 'util'\n\n\nglobal.implContext = null\n\n\n/**\n * Decorator to inject a dependency using an interface\n * @param typeToInject\n * @returns {Function}\n * @constructor\n */\nexport function Inject(typeToInject) {\n\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let targetName = global.implContext ? global.implContext.name : target.constructor.name\n\n    if(typeToInject.moduleType === 'controller') {\n      throw new TypeError('You cannot inject a Controller as a dependency, please take a look on ' + targetName)\n    }\n\n    ModuleContainer.addDependency(targetName, property, typeToInject)\n  }\n}\n\n\n/**\n * Decorator to specify when a class implements a specific interface\n * @param type\n * @param scope\n * @returns {Function}\n * @constructor\n */\nexport function Implements(type, scope = 'singleton') {\n  global.implContext = type\n\n  return (target, property, descriptor) => {\n    target.scope = scope\n    target.interfaceName = type.name\n    target.moduleType = 'implementation'\n\n    global.implContext = null\n\n    ModuleContainer.addImplementation(type, target)\n  }\n}\n\n\n/**\n * Decorator to specify a class is an interface\n * @param interfaceBase\n * @returns {MockedInterface}\n * @constructor\n */\nexport function Interface(interfaceBase) {\n  let interfaceClass = arguments[0]\n  interfaceBase.moduleType = 'interface'\n\n  class MockedInterface extends Abstract {\n    constructor() {\n      super()\n    }\n  }\n\n  Object.defineProperty(MockedInterface, 'name', {\n    value: interfaceBase.name,\n    configurable: true\n  })\n\n  let interfaceMethods = Object.getOwnPropertyNames(interfaceBase.prototype)\n\n  interfaceMethods.filter((methodName) => {\n    return methodName !== 'constructor'\n  }).forEach((method) => {\n    MockedInterface.prototype[method] = interfaceBase.prototype[method]\n  })\n\n  return MockedInterface\n}\n\n\n/**\n * Decorator to indicate a method which must be called after all dependencies are injected\n * @param target\n * @param property\n * @param descriptor\n * @constructor\n */\nexport function PostInject(target, property, descriptor) {\n  ModuleContainer.addPostInjectMethod(global.implContext.name, property)\n}\n\n\n/**\n * Enumeration to specify the scope type for implementations\n * @type {{SINGLETON: string, PROTOTYPE: string}}\n */\nexport var Scope = {\n  SINGLETON: 'singleton',\n  PROTOTYPE: 'prototype'\n}"]}