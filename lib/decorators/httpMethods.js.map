{"version":3,"sources":["../../src/decorators/httpMethods.js"],"names":[],"mappings":";;;;;;;;;;;QAUgB;QAkCA;;;;;;;;;;;;;;;;AAlCT,SAAS,GAAT,GAAe;;AAEpB,MAAI,cAAc,yBAAe,QAAf,GAA0B,OAA1B,CAAkC,0BAAgB,MAAhB,EAAwB,EAA1D,EAA8D,OAA9D,CAAsE,KAAtE,EAA6E,EAA7E,CAAd,CAFgB;AAGpB,MAAI,UAAU;AACZ,iBAAa,WAAb;GADE,CAHgB;;AAOpB,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,WAAO,WAAP,GAAqB,WAArB,CAD+C;AAE/C,8BAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,KAA3C,EAAkD,QAAQ,WAAR,CAAlD,CAF+C;GAAlC,CAPK;;AAYpB,MAAG,UAAU,MAAV,IAAoB,CAApB,EAAuB;AACxB,QAAG,QAAO,UAAU,CAAV,EAAP,KAAwB,QAAxB,EAAkC;AACnC,YAAM,kCAAwB,yCAAxB,EAAmE,IAAnE,EAAyE,CAAzE,CAAN,CADmC;KAArC;;AAIA,cAAU,UAAU,CAAV,KAAgB,EAAhB,CALc;AAMxB,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAR,GAAsB,WAAvB,GAAqC,QAAQ,WAAR,CANnC;;AAQxB,WAAO,QAAP,CARwB;GAA1B,MASO;AACL,QAAI,SAAS,UAAU,CAAV,CAAT,CADC;AAEL,QAAI,WAAW,UAAU,CAAV,CAAX,CAFC;AAGL,QAAI,aAAa,UAAU,CAAV,CAAb,CAHC;;AAKL,QAAG,OAAO,OAAO,QAAP,CAAP,KAA4B,UAA5B,EAAwC;AACzC,YAAM,kCAAwB,gCAAgC,QAAhC,GAA2C,iBAA3C,EAA8D,IAAtF,EAA4F,CAA5F,CAAN,CADyC;KAA3C;;AAIA,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,EATK;GATP;CAZK;;AAkCA,SAAS,IAAT,GAAgB;;AAErB,MAAI,cAAc,yBAAe,QAAf,GAA0B,OAA1B,CAAkC,0BAAgB,MAAhB,EAAwB,EAA1D,EAA8D,OAA9D,CAAsE,KAAtE,EAA6E,EAA7E,CAAd,CAFiB;AAGrB,MAAI,UAAU;AACZ,iBAAa,WAAb;GADE,CAHiB;;AAOrB,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,WAAO,WAAP,GAAqB,WAArB,CAD+C;AAE/C,8BAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,MAA3C,EAAmD,QAAQ,WAAR,CAAnD,CAF+C;GAAlC,CAPM;;AAYrB,MAAG,UAAU,MAAV,IAAoB,CAApB,EAAuB;AACxB,QAAG,QAAO,UAAU,CAAV,EAAP,KAAwB,QAAxB,EAAkC;AACnC,YAAM,kCAAwB,0CAAxB,EAAoE,IAApE,EAA0E,CAA1E,CAAN,CADmC;KAArC;;AAIA,cAAU,UAAU,CAAV,KAAgB,EAAhB,CALc;AAMxB,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAR,GAAsB,WAAvB,GAAqC,QAAQ,WAAR,CANnC;;AAQxB,WAAO,QAAP,CARwB;GAA1B,MASO;AACL,QAAI,SAAS,UAAU,CAAV,CAAT,CADC;AAEL,QAAI,WAAW,UAAU,CAAV,CAAX,CAFC;AAGL,QAAI,aAAa,UAAU,CAAV,CAAb,CAHC;;AAKL,QAAG,OAAO,OAAO,QAAP,CAAP,KAA4B,UAA5B,EAAwC;AACzC,YAAM,kCAAwB,iCAAiC,QAAjC,GAA4C,iBAA5C,EAA+D,IAAvF,EAA6F,CAA7F,CAAN,CADyC;KAA3C;;AAIA,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,EATK;GATP;CAZK","file":"httpMethods.js","sourcesContent":["/**\n * Decorators for HTTP Methods\n * @author calbertts\n */\n\nimport ModuleContainer from '../core/ModuleContainer'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\n\n\nexport function Get() {\n\n  let packagePath = NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', '')\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'get', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Get is not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Get expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}\n\nexport function Post() {\n\n  let packagePath = NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', '')\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'post', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Post is not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Post expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}"]}