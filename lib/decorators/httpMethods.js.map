{"version":3,"sources":["../../src/decorators/httpMethods.js"],"names":[],"mappings":";;;;;QAQgB;QAwBA;;;;AAxBT,SAAS,GAAT,GAAe;;AAEpB,MAAI,UAAU;AACZ,iBAAa,WAAb;GADE,CAFgB;;AAMpB,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,qCAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,KAA3C,EAAkD,QAAQ,WAAR,CAAlD,CAD+C;GAAlC,CANK;;AAUpB,MAAG,UAAU,MAAV,IAAoB,CAApB,EAAuB;AACxB,cAAU,UAAU,CAAV,KAAgB,EAAhB,CADc;AAExB,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAR,GAAsB,WAAvB,GAAqC,QAAQ,WAAR,CAFnC;;AAIxB,WAAO,QAAP,CAJwB;GAA1B,MAKO;AACL,QAAI,SAAS,UAAU,CAAV,CAAT,CADC;AAEL,QAAI,WAAW,UAAU,CAAV,CAAX,CAFC;AAGL,QAAI,aAAa,UAAU,CAAV,CAAb,CAHC;;AAKL,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,EALK;GALP;CAVK;;;;;;AAwBA,SAAS,IAAT,GAAgB;;AAErB,MAAI,UAAU;AACZ,iBAAa,WAAb;GADE,CAFiB;;AAMrB,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,qCAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,MAA3C,EAAmD,QAAQ,WAAR,CAAnD,CAD+C;GAAlC,CANM;;AAUrB,MAAG,UAAU,MAAV,IAAoB,CAApB,EAAuB;AACxB,cAAU,UAAU,CAAV,KAAgB,EAAhB,CADc;AAExB,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAR,GAAsB,WAAvB,GAAqC,QAAQ,WAAR,CAFnC;;AAIxB,WAAO,QAAP,CAJwB;GAA1B,MAKO;AACL,QAAI,SAAS,UAAU,CAAV,CAAT,CADC;AAEL,QAAI,WAAW,UAAU,CAAV,CAAX,CAFC;AAGL,QAAI,aAAa,UAAU,CAAV,CAAb,CAHC;;AAKL,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,EALK;GALP;CAVK","file":"httpMethods.js","sourcesContent":["/**\r\n * HTTP Methods\r\n *\r\n * @author calbertts\r\n */\r\n\r\nimport {ModuleContainer} from '../core/moduleContainer'\r\n\r\nexport function Get() {\r\n\r\n  let options = {\r\n    contentType: 'text/html'\r\n  }\r\n\r\n  let addRoute = (target, property, descriptor) => {\r\n    ModuleContainer.addRoute(target, property, 'get', options.contentType)\r\n  }\r\n\r\n  if(arguments.length <= 1) {\r\n    options = arguments[0] || {}\r\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\r\n\r\n    return addRoute\r\n  } else {\r\n    let target = arguments[0]\r\n    let property = arguments[1]\r\n    let descriptor = arguments[2]\r\n\r\n    addRoute(target, property, descriptor)\r\n  }\r\n}\r\n\r\nexport function Post() {\r\n\r\n  let options = {\r\n    contentType: 'text/html'\r\n  }\r\n\r\n  let addRoute = (target, property, descriptor) => {\r\n    ModuleContainer.addRoute(target, property, 'post', options.contentType)\r\n  }\r\n\r\n  if(arguments.length <= 1) {\r\n    options = arguments[0] || {}\r\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\r\n\r\n    return addRoute\r\n  } else {\r\n    let target = arguments[0]\r\n    let property = arguments[1]\r\n    let descriptor = arguments[2]\r\n\r\n    addRoute(target, property, descriptor)\r\n  }\r\n}"]}