{"version":3,"sources":["../../src/decorators/httpMethods.js"],"names":[],"mappings":";;;;;;;;;;;QAWgB,G,GAAA,G;QAoCA,I,GAAA,I;;;;;;;;;;;;;;;;;;;;AApCT,SAAS,GAAT,GAAe;;AAEpB,MAAI,kBAAkB,eAAK,OAAL,CAAa,yBAAe,QAAf,GAA0B,OAA1B,CAAkC,0BAAgB,MAAlD,EAA0D,EAA1D,EAA8D,OAA9D,CAAsE,KAAtE,EAA6E,EAA7E,CAAb,CAAtB;AACA,MAAI,UAAU;AACZ,iBAAa;AADD,GAAd;;AAIA,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,QAAI,cAAc,kBAAkB,GAAlB,GAAwB,OAAO,WAAP,CAAmB,IAA7D;;AAEA,WAAO,WAAP,GAAqB,WAArB;AACA,8BAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,KAA3C,EAAkD,QAAQ,WAA1D;AACD,GALD;;AAOA,MAAG,UAAU,MAAV,IAAoB,CAAvB,EAA0B;AACxB,QAAG,QAAO,UAAU,CAAV,CAAP,MAAwB,QAA3B,EAAqC;AACnC,YAAM,kCAAwB,0CAAxB,EAAoE,IAApE,EAA0E,CAA1E,CAAN;AACD;;AAED,cAAU,UAAU,CAAV,KAAgB,EAA1B;AACA,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAT,GAAuB,WAAvB,GAAqC,QAAQ,WAAnE;;AAEA,WAAO,QAAP;AACD,GATD,MASO;AACL,QAAI,SAAS,UAAU,CAAV,CAAb;AACA,QAAI,WAAW,UAAU,CAAV,CAAf;AACA,QAAI,aAAa,UAAU,CAAV,CAAjB;;AAEA,QAAG,OAAO,OAAO,QAAP,CAAP,KAA4B,UAA/B,EAA2C;AACzC,YAAM,kCAAwB,gCAAgC,QAAhC,GAA2C,iBAAnE,EAAsF,IAAtF,EAA4F,CAA5F,CAAN;AACD;;AAED,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B;AACD;AACF;;AAEM,SAAS,IAAT,GAAgB;;AAErB,MAAI,kBAAkB,eAAK,OAAL,CAAa,yBAAe,QAAf,GAA0B,OAA1B,CAAkC,0BAAgB,MAAlD,EAA0D,EAA1D,EAA8D,OAA9D,CAAsE,KAAtE,EAA6E,EAA7E,CAAb,CAAtB;AACA,MAAI,UAAU;AACZ,iBAAa;AADD,GAAd;;AAIA,MAAI,WAAW,SAAX,QAAW,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AAC/C,QAAI,cAAc,kBAAkB,GAAlB,GAAwB,OAAO,WAAP,CAAmB,IAA7D;;AAEA,WAAO,WAAP,GAAqB,WAArB;AACA,8BAAgB,QAAhB,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,MAA3C,EAAmD,QAAQ,WAA3D;AACD,GALD;;AAOA,MAAG,UAAU,MAAV,IAAoB,CAAvB,EAA0B;AACxB,QAAG,QAAO,UAAU,CAAV,CAAP,MAAwB,QAA3B,EAAqC;AACnC,YAAM,kCAAwB,0CAAxB,EAAoE,IAApE,EAA0E,CAA1E,CAAN;AACD;;AAED,cAAU,UAAU,CAAV,KAAgB,EAA1B;AACA,YAAQ,WAAR,GAAsB,CAAC,QAAQ,WAAT,GAAuB,WAAvB,GAAqC,QAAQ,WAAnE;;AAEA,WAAO,QAAP;AACD,GATD,MASO;AACL,QAAI,SAAS,UAAU,CAAV,CAAb;AACA,QAAI,WAAW,UAAU,CAAV,CAAf;AACA,QAAI,aAAa,UAAU,CAAV,CAAjB;;AAEA,QAAG,OAAO,OAAO,QAAP,CAAP,KAA4B,UAA/B,EAA2C;AACzC,YAAM,kCAAwB,iCAAiC,QAAjC,GAA4C,iBAApE,EAAuF,IAAvF,EAA6F,CAA7F,CAAN;AACD;;AAED,aAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B;AACD;AACF","file":"httpMethods.js","sourcesContent":["/**\n * Decorators for HTTP Methods\n * @author calbertts\n */\n\nimport ModuleContainer from '../core/ModuleContainer'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\nimport path from 'path'\n\n\nexport function Get() {\n\n  let basePackagePath = path.dirname(NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', ''))\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    let packagePath = basePackagePath + '/' + target.constructor.name\n\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'get', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Get are not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Get expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}\n\nexport function Post() {\n\n  let basePackagePath = path.dirname(NodeSpringUtil.getStack().replace(ModuleContainer.appDir, '').replace('.js', ''))\n  let options = {\n    contentType: 'text/html'\n  }\n\n  let addRoute = (target, property, descriptor) => {\n    let packagePath = basePackagePath + '/' + target.constructor.name\n\n    target.packagePath = packagePath\n    ModuleContainer.addRoute(target, property, 'post', options.contentType)\n  }\n\n  if(arguments.length <= 1) {\n    if(typeof arguments[0] !== 'object') {\n      throw new NodeSpringException('The options passed to @Post is not valid', this, 2)\n    }\n\n    options = arguments[0] || {}\n    options.contentType = !options.contentType ? 'text/html' : options.contentType\n\n    return addRoute\n  } else {\n    let target = arguments[0]\n    let property = arguments[1]\n    let descriptor = arguments[2]\n\n    if(typeof target[property] !== 'function') {\n      throw new NodeSpringException('@Post expects a method but \"' + property + '\" was received.', this, 2)\n    }\n\n    addRoute(target, property, descriptor)\n  }\n}"]}