{"version":3,"sources":["../../src/decorators/testing.js"],"names":[],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * Testing decorators\n * @author calbertts\n */\n\nimport clc from 'cli-color'\nimport t from 'exectimer'\nimport path from 'path'\nimport assert from '../core/assert'\n\nimport ModuleContainer from '../core/moduleContainer'\nimport NodeSpringUtil from '../core/nodeSpringUtil'\n\n\nlet objectToTest = null\nlet mocksToInject = {}\n\n\nexport function TestClass(testClass) {\n  if(!NodeSpringUtil.isClass(testClass))\n    throw new TypeError('A class was expected to test')\n\n  console.log(clc.blue.bold('NodeSpring Unit Test Runner:', clc.yellow(className, '\\n')))\n\n  let testClassObj = new testClass()\n\n  // Inject mocks into the object to test\n  for(let classProp in objectToTest.dependencies) {\n    let dataType = objectToTest.dependencies[classProp]\n\n    if(!mocksToInject[dataType]) {\n      console.error(clc.yellow.bold('  WARNING:'), clc.yellow('There isn\\'t a mock for the dependency injected in ' + objectToTest.type.name + '.' + classProp + ' (' + path.basename(dataType) + ')\\n           An empty object will be provided, but tests can fail\\n'))\n      objectToTest.instance[classProp] = {}\n    } else {\n      objectToTest.instance[classProp] = mocksToInject[dataType].instance\n      mocksToInject[dataType].used = true\n      testClassObj[mocksToInject[dataType].testClassProperty] = mocksToInject[dataType].instance\n    }\n  }\n\n  // Check for mocks which aren't required\n  for(let dataType in mocksToInject) {\n    if(mocksToInject[dataType] && !mocksToInject[dataType].used) {\n      console.error(clc.yellow.bold('  WARNING:'), clc.yellow('The declared mock for ' + testClass.name + '.' + mocksToInject[dataType].testClassProperty + ' is not required on ' + objectToTest.instance.constructor.name + '\\n'))\n    }\n  }\n\n  testClassObj[objectToTest.testClassProperty] = objectToTest.instance\n\n  let testingMethods = Object.getOwnPropertyNames(testClass.prototype)\n\n  // Running all methods\n  let className = testClassObj.constructor.name\n  let beforeMethods = testingMethods.filter((method) => {return testClassObj[method].beforeMethod === true})\n  let testMethods = testingMethods.filter((method) => {return testClassObj[method].testMethod === true})\n  let promises = []\n  let methodStatus = {\n    success: [],\n    failed: []\n  }\n\n  let tick = new t.Tick(className)\n  tick.start()\n\n  testMethods.forEach((method) => {\n    beforeMethods.forEach((beforeMethod) => {\n      testClassObj[beforeMethod]()\n    })\n\n    let promise = new Promise((resolve, reject) => {\n\n      let assertInstance = {}\n      Object.assign(assertInstance, assert)\n\n      assertInstance.done = () => {\n        let passedSymbol = process.platform === 'win32' ? 'OK' : '✔'\n        let failedSymbol = process.platform === 'win32' ? 'FAIL' : '✘'\n\n        if(assertInstance.ok.lastStack) {\n\n          console.log(clc.red('  ' + clc.red.bold(failedSymbol), method))\n          console.log(clc.red('   ', assertInstance.ok.lastStack), '\\n')\n\n          methodStatus.failed.push(method)\n          resolve()\n          assertInstance.ok.lastStack = null\n        } else {\n          console.log(clc.green('  ' + clc.green.bold(passedSymbol), method), '\\n')\n\n          methodStatus.success.push(method)\n          resolve()\n        }\n      }\n\n      // Execute real method\n      testClassObj[method](assertInstance)\n    })\n\n    promises.push(promise)\n  })\n\n  Promise.all(promises).then((values) => {\n    tick.stop()\n\n    let timeStr = t.timers[className].parse(t.timers[className].duration())\n\n    if(methodStatus.failed.length > 0)\n      console.log(' ', clc.red(methodStatus.failed.length, 'of', testMethods.length, 'tests failed'))\n    else\n      console.log(' ', clc.blue('All tests have passed!'))\n\n    console.log(clc.blue.bold('  Time:'), clc.yellow(timeStr), '\\n')\n  })\n}\n\n\nexport function Mock(type) {\n  if(type.moduleType !== 'interface' && type.moduleType !== 'service')\n    throw new TypeError('Mock expects an Interface or a Service as a parameter, instead ' + (type.name ? type.name : 'unknown') + ' was received')\n\n  return (target, property, descriptor) => {\n    let mockInstance = {\n      uniqueMethod: () => {\n        return \"String from mock\"\n      }\n    }\n\n    descriptor.writable = true\n\n    mocksToInject[type.packagePath] = {\n      testClassProperty: property,\n      used: false,\n      instance: mockInstance\n    }\n  }\n}\n\n\nexport function Test(target, property, descriptor) {\n  if(typeof target[property] !== 'function')\n    throw new TypeError('A function was expected to test: ' + property)\n\n  descriptor.value.testMethod = true\n}\n\n\nexport function Before(target, property, descriptor) {\n  if(typeof target[property] !== 'function')\n    throw new TypeError('A function was expected to test: ' + property)\n\n  descriptor.value.beforeMethod = true\n}\n\n\nexport function InjectMocks(type) {\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let metaInstance\n    let instance\n\n    switch(type.moduleType) {\n\n      case 'implementation' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.interfacePackagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'service' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'controller' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n    }\n\n    objectToTest = {\n      type: type,\n      testClassProperty: property,\n      instance: instance,\n      dependencies: metaInstance.dependencies\n    }\n  }\n}"]}