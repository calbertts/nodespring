{"version":3,"sources":["../../src/decorators/testing.js"],"names":[],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * Testing decorators\n * @author calbertts\n */\n\nimport clc from 'cli-color'\nimport t from 'exectimer'\nimport path from 'path'\nimport assert from '../core/assert'\n\nimport ModuleContainer from '../core/ModuleContainer'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\n\n\nlet objectToTest = null\nlet mocksToInject = {}\n\n\nexport function TestClass(testClass) {\n  if(!testClass || !NodeSpringUtil.isClass(testClass)) {\n    throw new NodeSpringException('@TestClass expects a Class but an ' + testClass + ' was received.', this, 2)\n  }\n\n  NodeSpringUtil.logging = true\n  NodeSpringUtil.log(clc.blue.bold('NodeSpring Unit Test Runner:', clc.yellow(className, '\\n')))\n\n  let testClassObj = new testClass()\n\n  // Inject mocks into the object to test\n  for(let classProp in objectToTest.dependencies) {\n    let dataType = objectToTest.dependencies[classProp]\n\n    if(!mocksToInject[dataType]) {\n      NodeSpringUtil.error(clc.yellow.bold('  WARNING:'), clc.yellow('There isn\\'t a mock for the dependency injected in ' + objectToTest.type.name + '.' + classProp + ' (' + path.basename(dataType) + ')\\n           An empty object will be provided, but tests can fail\\n'))\n      objectToTest.instance[classProp] = {}\n    } else {\n      objectToTest.instance[classProp] = mocksToInject[dataType].instance\n      mocksToInject[dataType].used = true\n      testClassObj[mocksToInject[dataType].testClassProperty] = mocksToInject[dataType].instance\n    }\n  }\n\n  // Check for mocks which aren't required\n  for(let dataType in mocksToInject) {\n    if(mocksToInject[dataType] && !mocksToInject[dataType].used) {\n      NodeSpringUtil.error(clc.yellow.bold('  WARNING:'), clc.yellow('The declared mock for ' + testClass.name + '.' + mocksToInject[dataType].testClassProperty + ' is not required on ' + objectToTest.instance.constructor.name + '\\n'))\n    }\n  }\n\n  testClassObj[objectToTest.testClassProperty] = objectToTest.instance\n\n  let testingMethods = Object.getOwnPropertyNames(testClass.prototype)\n\n  // Running all methods\n  let className = testClassObj.constructor.name\n  let beforeMethods = testingMethods.filter((method) => {return testClassObj[method].beforeMethod === true})\n  let testMethods = testingMethods.filter((method) => {return testClassObj[method].testMethod === true})\n  let promises = []\n  let methodStatus = {\n    success: [],\n    failed: []\n  }\n\n  let tick = new t.Tick(className)\n  tick.start()\n\n  testMethods.forEach((method) => {\n    beforeMethods.forEach((beforeMethod) => {\n      testClassObj[beforeMethod]()\n    })\n\n    let promise = new Promise((resolve, reject) => {\n\n      let assertInstance = {}\n      Object.assign(assertInstance, assert)\n\n      assertInstance.done = () => {\n        let passedSymbol = process.platform === 'win32' ? 'OK' : '✔'\n        let failedSymbol = process.platform === 'win32' ? 'FAIL' : '✘'\n\n        if(assertInstance.ok.lastStack) {\n\n          NodeSpringUtil.log(clc.red('  ' + clc.red.bold(failedSymbol), method))\n          NodeSpringUtil.log(clc.red('   ', assertInstance.ok.lastStack), '\\n')\n\n          methodStatus.failed.push(method)\n          resolve()\n          assertInstance.ok.lastStack = null\n        } else {\n          NodeSpringUtil.log(clc.green('  ' + clc.green.bold(passedSymbol), method), '\\n')\n\n          methodStatus.success.push(method)\n          resolve()\n        }\n      }\n\n      // Execute real method\n      testClassObj[method](assertInstance)\n    })\n\n    promises.push(promise)\n  })\n\n  Promise.all(promises).then((values) => {\n    tick.stop()\n\n    let timeStr = t.timers[className].parse(t.timers[className].duration())\n\n    if(methodStatus.failed.length > 0)\n      NodeSpringUtil.log(' ', clc.red(methodStatus.failed.length, 'of', testMethods.length, 'tests failed'))\n    else\n      NodeSpringUtil.log(' ', clc.blue('All tests have passed!'))\n\n    NodeSpringUtil.log(clc.blue.bold('  Time:'), clc.yellow(timeStr), '\\n')\n  })\n}\n\n\nexport function Mock(type) {\n  if(!type || !NodeSpringUtil.isClass(type)) {\n    throw new NodeSpringException('@Mock expects an Interface but an ' + type + ' was received.', this, 2)\n  }\n\n  if(type.moduleType !== 'interface' && type.moduleType !== 'service') {\n    throw new NodeSpringException('Mock expects an Interface or a Service as a parameter, instead ' + (type.name ? type.name : 'unknown') + ' was received', this, 2)\n  }\n\n  return (target, property, descriptor) => {\n    let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n    let mockInstance = {}\n\n    interfaceMethods.forEach((method) => {\n      mockInstance[method] = () => {}\n    })\n\n    descriptor.writable = true\n\n    mocksToInject[type.packagePath] = {\n      testClassProperty: property,\n      used: false,\n      instance: mockInstance\n    }\n  }\n}\n\n\nexport function Test(target, property, descriptor) {\n  if(typeof target[property] !== 'function') {\n    throw new NodeSpringException('@Test expects a method but an ' + descriptor.value + ' was received.', this, 2)\n  }\n\n  descriptor.value.testMethod = true\n}\n\n\nexport function Before(target, property, descriptor) {\n  if(typeof target[property] !== 'function') {\n    throw new NodeSpringException('@Before expects a method but an ' + descriptor.value + ' was received.', this, 2)\n  }\n\n  descriptor.value.beforeMethod = true\n}\n\n\nexport function InjectMocks(type) {\n  if(!type || !NodeSpringUtil.isClass(type)) {\n    throw new NodeSpringException('@InjectMocks expects an Implementation but an ' + type + ' was received.', this, 2)\n  }\n\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let metaInstance\n    let instance\n\n    switch(type.moduleType) {\n\n      case 'implementation' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.interfacePackagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'service' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n\n      case 'controller' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.packagePath]\n        instance = metaInstance.impl\n      break\n    }\n\n    objectToTest = {\n      type: type,\n      testClassProperty: property,\n      instance: instance,\n      dependencies: metaInstance.dependencies\n    }\n  }\n}"]}