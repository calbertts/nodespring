{"version":3,"sources":["../../src/decorators/testing.js"],"names":[],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * Testing decorators\n * @author calbertts\n */\n\nimport clc from 'cli-color'\nimport t from 'exectimer'\nimport assert from '../core/assert'\n\nimport ModuleContainer from '../core/moduleContainer'\nimport NodeSpringUtil from '../core/nodeSpringUtil'\n\n\nvar injectMocksCllbk\nvar localMocksInjectedCllbk\nvar mocksToInject = {}\n\n\nexport function TestClass(testClass) {\n  if(!NodeSpringUtil.isClass(testClass))\n    throw new TypeError('A class was expected to test')\n\n  let testClassObj = new testClass()\n\n  injectMocksCllbk(testClassObj)\n  localMocksInjectedCllbk(testClassObj)\n\n  let testingMethods = Object.getOwnPropertyNames(testClass.prototype)\n\n  // Running all methods\n  let className = testClassObj.constructor.name\n  let beforeMethods = testingMethods.filter((method) => {return testClassObj[method].beforeMethod === true})\n  let testMethods = testingMethods.filter((method) => {return testClassObj[method].testMethod === true})\n  let promises = []\n  let methodStatus = {\n    success: [],\n    failed: []\n  }\n\n  console.log(clc.blue('NodeSpring Unit Test Runner:', clc.yellow(className, '\\n')))\n\n  let tick = new t.Tick(className)\n  tick.start()\n\n  testMethods.forEach((method) => {\n    beforeMethods.forEach((beforeMethod) => {\n      testClassObj[beforeMethod]()\n    })\n\n    let promise = new Promise((resolve, reject) => {\n\n      let assertInstance = {}\n      Object.assign(assertInstance, assert)\n\n      assertInstance.done = () => {\n        let passedSymbol = process.platform === 'win32' ? 'OK' : '✔'\n        let failedSymbol = process.platform === 'win32' ? 'FAIL' : '✘'\n\n        if(assertInstance.ok.lastStack) {\n\n          console.log(clc.red('  ' + failedSymbol, method))\n          console.log(clc.red('   ', assertInstance.ok.lastStack), '\\n')\n\n          methodStatus.failed.push(method)\n          resolve()\n          assertInstance.ok.lastStack = null\n        } else {\n          console.log(clc.green('  ' + passedSymbol, method), '\\n')\n\n          methodStatus.success.push(method)\n          resolve()\n        }\n      }\n\n      testClassObj[method](assertInstance)\n    })\n\n    promises.push(promise)\n  })\n\n  Promise.all(promises).then((values) => {\n    tick.stop()\n\n    let timeStr = t.timers[className].parse(t.timers[className].duration())\n\n    if(methodStatus.failed.length > 0)\n      console.log(' ', clc.red(methodStatus.failed.length, 'of', testMethods.length, 'tests failed'))\n    else\n      console.log(' ', clc.blue('All tests have passed!'))\n\n    console.log(clc.blue('  Time:'), clc.yellow(timeStr), '\\n')\n  })\n}\n\n\nexport function Mock(type) {\n  if(!type.moduleType === 'interface')\n    throw new TypeError('Mock expects an Interface as a parameter, instead ' + type.name + ' was received')\n\n  return (target, property, descriptor) => {\n    let mockInstance = {\n      uniqueMethod: () => {\n        return \"String from mock\"\n      }\n    }\n\n    descriptor.writable = true\n    mocksToInject[type.name] = mockInstance\n\n    localMocksInjectedCllbk = (testClassObj) => {\n      testClassObj[property] = mockInstance\n    }\n  }\n}\n\n\nexport function Test(target, property, descriptor) {\n  if(typeof target[property] !== 'function')\n    throw new TypeError('A function was expected to test: ' + property)\n\n  descriptor.value.testMethod = true\n}\n\n\nexport function Before(target, property, descriptor) {\n  if(typeof target[property] !== 'function')\n    throw new TypeError('A function was expected to test: ' + property)\n\n  descriptor.value.beforeMethod = true\n}\n\n\nexport function InjectMocks(type) {\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let metaInstance\n    let objToTest\n\n    console.log(type.name)\n\n    switch(type.moduleType) {\n\n      case 'implementation' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.interfaceName]\n        objToTest = metaInstance.impl\n      break\n\n      case 'service' :\n        metaInstance = ModuleContainer.getModuleContainer()[type.name]\n        objToTest = metaInstance.impl\n      break\n\n      case 'controller' :\n        throw new TypeError('Testing for Controllers are not supported yet')\n      break\n    }\n\n    for(let classProp in metaInstance.dependencies) {\n      let dataType = metaInstance.dependencies[classProp]\n      objToTest[classProp] = mocksToInject[dataType]\n    }\n\n    injectMocksCllbk = (testClassObj) => {\n      testClassObj[property] = objToTest\n    }\n  }\n}"]}