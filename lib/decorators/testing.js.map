{"version":3,"sources":["../../src/decorators/testing.js"],"names":[],"mappings":"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","file":"testing.js","sourcesContent":["import clc from 'cli-color'\r\nimport t from 'exectimer'\r\nimport assert from '../core/assert'\r\n\r\nimport {ModuleContainer} from '../core/moduleContainer'\r\n\r\nvar injectMocksCllbk\r\nvar localMocksInjectedCllbk\r\nvar mocksToInject = {}\r\n\r\nlet isClass = (arg) => {\r\n  return arg && arg.constructor === Function\r\n}\r\n\r\nexport function TestClass(testClass) {\r\n  if(!isClass(testClass))\r\n    throw new TypeError('A class was expected to test')\r\n\r\n  let testClassObj = new testClass()\r\n\r\n  injectMocksCllbk(testClassObj)\r\n  localMocksInjectedCllbk(testClassObj)\r\n\r\n  let testingMethods = Object.getOwnPropertyNames(testClass.prototype)\r\n\r\n  // Running all methods\r\n  let className = testClassObj.constructor.name\r\n  let beforeMethods = testingMethods.filter((method) => {return testClassObj[method].beforeMethod === true})\r\n  let testMethods = testingMethods.filter((method) => {return testClassObj[method].testMethod === true})\r\n  let promises = []\r\n  let methodStatus = {\r\n    success: [],\r\n    failed: []\r\n  }\r\n\r\n  console.log(clc.blue('NodeSpring Unit Test Runner:', clc.yellow(className, '\\n')))\r\n\r\n  let tick = new t.Tick(className)\r\n  tick.start()\r\n\r\n  testMethods.forEach((method) => {\r\n    beforeMethods.forEach((beforeMethod) => {\r\n      testClassObj[beforeMethod]()\r\n    })\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n\r\n      let assertInstance = {}\r\n      Object.assign(assertInstance, assert)\r\n\r\n      assertInstance.done = () => {\r\n        let passedSymbol = process.platform === 'win32' ? 'OK' : '✔'\r\n        let failedSymbol = process.platform === 'win32' ? 'FAIL' : '✘'\r\n\r\n        if(assertInstance.ok.lastStack) {\r\n\r\n          console.log(clc.red('  ' + failedSymbol, method))\r\n          console.log(clc.red('   ', assertInstance.ok.lastStack), '\\n')\r\n\r\n          methodStatus.failed.push(method)\r\n          resolve()\r\n          assertInstance.ok.lastStack = null\r\n        } else {\r\n          console.log(clc.green('  ' + passedSymbol, method), '\\n')\r\n\r\n          methodStatus.success.push(method)\r\n          resolve()\r\n        }\r\n      }\r\n\r\n      testClassObj[method](assertInstance)\r\n    })\r\n\r\n    promises.push(promise)\r\n  })\r\n\r\n  Promise.all(promises).then((values) => {\r\n    tick.stop()\r\n\r\n    let timeStr = t.timers[className].parse(t.timers[className].duration())\r\n\r\n    if(methodStatus.failed.length > 0)\r\n      console.log(' ', clc.red(methodStatus.failed.length, 'of', testMethods.length, 'tests failed'))\r\n    else\r\n      console.log(' ', clc.blue('All tests have passed!'))\r\n\r\n    console.log(clc.blue('  Time:'), clc.yellow(timeStr), '\\n')\r\n  })\r\n}\r\n\r\n\r\nexport function Mock(type) {\r\n  if(!type.moduleType === 'interface')\r\n    throw new TypeError('Mock expects an Interface as a parameter, instead ' + type.name + ' was received')\r\n\r\n  return (target, property, descriptor) => {\r\n    let mockInstance = {\r\n      uniqueMethod: () => {\r\n        return \"String from mock\"\r\n      }\r\n    }\r\n\r\n    descriptor.writable = true\r\n    mocksToInject[type.name] = mockInstance\r\n\r\n    localMocksInjectedCllbk = (testClassObj) => {\r\n      testClassObj[property] = mockInstance\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function Test(target, property, descriptor) {\r\n  if(typeof target[property] !== 'function')\r\n    throw new TypeError('A function was expected to test: ' + property)\r\n\r\n  descriptor.value.testMethod = true\r\n}\r\n\r\n\r\nexport function Before(target, property, descriptor) {\r\n  if(typeof target[property] !== 'function')\r\n    throw new TypeError('A function was expected to test: ' + property)\r\n\r\n  descriptor.value.beforeMethod = true\r\n}\r\n\r\n\r\nexport function InjectMocks(type) {\r\n  return (target, property, descriptor) => {\r\n    descriptor.writable = true\r\n\r\n    let metaInstance\r\n    let objToTest\r\n\r\n    switch(type.moduleType) {\r\n\r\n      case 'implementation' :\r\n        metaInstance = ModuleContainer.getModuleContainer()[type.interfaceName]\r\n        objToTest = new metaInstance.impl()\r\n      break\r\n\r\n      case 'service' :\r\n        metaInstance = ModuleContainer.getModuleContainer()[type.name]\r\n        objToTest = metaInstance.impl\r\n      break\r\n\r\n      case 'controller' :\r\n        throw new TypeError('Testing for Controllers are not supported yet')\r\n      break\r\n    }\r\n\r\n    for(let classProp in metaInstance.dependencies) {\r\n      let dataType = metaInstance.dependencies[classProp]\r\n      objToTest[classProp] = mocksToInject[dataType]\r\n    }\r\n\r\n    injectMocksCllbk = (testClassObj) => {\r\n      testClassObj[property] = objToTest\r\n    }\r\n  }\r\n}"]}