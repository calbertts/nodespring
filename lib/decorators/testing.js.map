{"version":3,"sources":["../../src/decorators/testing.js"],"names":[],"mappings":";;;;;QAOgB;QAWA;QAkBA;QAOA;;;;AAzChB,IAAI,gBAAJ;AACA,IAAI,uBAAJ;AACA,IAAI,gBAAgB,EAAhB;;AAGG,SAAS,SAAT,CAAmB,SAAnB,EAA8B;AACnC,MAAI,eAAe,IAAI,SAAJ,EAAf,CAD+B;AAEnC,mBAAiB,YAAjB,EAFmC;AAGnC,0BAAwB,YAAxB,EAHmC;;AAKnC,UAAQ,GAAR,CAAY,YAAZ,EALmC;;AAOnC,UAAQ,GAAR,CAAY,aAAa,KAAb,EAAZ,EAPmC;CAA9B;;AAWA,SAAS,IAAT,CAAc,IAAd,EAAoB;AACzB,SAAO,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AACvC,QAAI,eAAe;AACjB,oBAAc,wBAAM;AAClB,eAAO,kBAAP,CADkB;OAAN;KADZ,CADmC;;AAOvC,eAAW,QAAX,GAAsB,IAAtB,CAPuC;AAQvC,kBAAc,KAAK,IAAL,CAAd,GAA2B,YAA3B,CARuC;;AAUvC,8BAA0B,iCAAC,YAAD,EAAkB;AAC1C,mBAAa,QAAb,IAAyB,YAAzB,CAD0C;KAAlB,CAVa;GAAlC,CADkB;CAApB;;AAkBA,SAAS,IAAT,GAAgB;AACrB,SAAO,UAAC,MAAD,EAAY;AACjB,YAAQ,GAAR,CAAY,SAAZ,EAAuB,OAAO,IAAP,CAAvB,CADiB;GAAZ,CADc;CAAhB;;AAOA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AAChC,SAAO,UAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAAkC;AACvC,eAAW,QAAX,GAAsB,IAAtB,CADuC;;AAGvC,QAAI,eAAe,iCAAgB,kBAAhB,GAAqC,KAAK,aAAL,CAApD,CAHmC;AAIvC,QAAI,YAAY,aAAa,IAAb,CAJuB;;AAMvC,SAAI,IAAI,SAAJ,IAAiB,aAAa,YAAb,EAA2B;AAC9C,UAAI,WAAW,aAAa,YAAb,CAA0B,SAA1B,CAAX,CAD0C;AAE9C,gBAAU,SAAV,IAAuB,cAAc,QAAd,CAAvB,CAF8C;KAAhD;;AAKA,uBAAmB,0BAAC,YAAD,EAAkB;AACnC,mBAAa,QAAb,IAAyB,SAAzB,CADmC;AAEnC,cAAQ,GAAR,CAAY,WAAZ,EAAyB,SAAzB,EAFmC;KAAlB,CAXoB;GAAlC,CADyB;CAA3B","file":"testing.js","sourcesContent":["import {ModuleContainer} from '../core/moduleContainer'\n\nvar injectMocksCllbk\nvar localMocksInjectedCllbk\nvar mocksToInject = {}\n\n\nexport function TestClass(testClass) {\n  let testClassObj = new testClass()\n  injectMocksCllbk(testClassObj)\n  localMocksInjectedCllbk(testClassObj)\n\n  console.log(testClassObj)\n\n  console.log(testClassObj.test1())\n}\n\n\nexport function Mock(type) {\n  return (target, property, descriptor) => {\n    let mockInstance = {\n      uniqueMethod: () => {\n        return \"String from mock\"\n      }\n    }\n\n    descriptor.writable = true\n    mocksToInject[type.name] = mockInstance\n\n    localMocksInjectedCllbk = (testClassObj) => {\n      testClassObj[property] = mockInstance\n    }\n  }\n}\n\n\nexport function Test() {\n  return (target) => {\n    console.log('Inside ', target.name)\n  }\n}\n\n\nexport function InjectMocks(type) {\n  return (target, property, descriptor) => {\n    descriptor.writable = true\n\n    let metaInstance = ModuleContainer.getModuleContainer()[type.interfaceName]\n    let objToTest = metaInstance.impl\n\n    for(let classProp in metaInstance.dependencies) {\n      let dataType = metaInstance.dependencies[classProp]\n      objToTest[classProp] = mocksToInject[dataType]\n    }\n\n    injectMocksCllbk = (testClassObj) => {\n      testClassObj[property] = objToTest\n      console.log('objToTest', objToTest)\n    }\n  }\n}"]}