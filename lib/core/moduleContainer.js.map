{"version":3,"sources":["../../src/core/moduleContainer.js"],"names":[],"mappings":";;;;AAAA,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,cAAc,QAAQ,MAAR,CAAd;AACJ,IAAI,iBAAiB,QAAQ,kBAAR,EAA4B,OAA5B;;;AAIrB,IAAI,mBAAmB,EAAnB;;AAGJ,IAAI,kBAAkB;;AAEpB,cAAY,IAAZ;;AAEA,QAAM,cAAC,GAAD,EAAM,MAAN,EAAiB;;AAErB,oBAAgB,UAAhB,GAA6B,GAA7B,CAFqB;GAAjB;;AAKN,eAAa,qBAAC,MAAD,EAAY;AACvB,QAAI,OAAO,SAAP,IAAO,CAAC,IAAD,EAAU;AACnB,SAAG,KAAH,CAAS,IAAT,EAAe,UAAC,GAAD,EAAM,IAAN,EAAe;AAC5B,YAAG,GAAH,EACE,MAAM,GAAN,CADF,KAEK,IAAI,KAAK,WAAL,EAAJ,EAAwB;AAC3B,aAAG,OAAH,CAAW,IAAX,EAAiB,UAAC,GAAD,EAAM,KAAN,EAAgB;AAC/B,gBAAI,aAAJ;gBAAO,IAAI,MAAM,MAAN,CADoB;AAE/B,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,CAAJ,EAAO,GAAvB,EAA4B;AAC1B,kBAAI,YAAY,IAAZ,CAAiB,IAAjB,EAAuB,MAAM,CAAN,CAAvB,CAAJ,CAD0B;AAE1B,mBAAK,CAAL,EAF0B;aAA5B;WAFe,CAAjB,CAD2B;SAAxB,MAQE;AACL,cAAG,KAAK,OAAL,CAAa,MAAb,IAAuB,CAAvB,EAA0B;;;;;AAK3B,oBAAQ,IAAR,EAAc,OAAd,CAL2B;WAA7B;SATG;OAHQ,CAAf,CADmB;KAAV,CADY;;AAyBvB,QAAI,UAAU,YAAY,IAAZ,CAAiB,MAAjB,CAAV,CAzBmB;AA0BvB,SAAK,OAAL,EA1BuB;GAAZ;;AA6Bb,kCAAW,WAAW;AACpB,QAAI,aAAa,UAAU,IAAV,CADG;;AAGpB,QAAG,CAAC,iBAAiB,UAAjB,CAAD,EAA+B;AAChC,uBAAiB,UAAjB,IAA+B;AAC7B,cAAM,SAAN;AACA,oBAAY,EAAZ;AACA,sBAAc,EAAd;OAHF,CADgC;KAAlC;;AAQA,qBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAAI,SAAJ,EAApC,CAXoB;GAtCF;AAoDpB,wCAAc,WAAW,MAAM;AAC7B,QAAI,aAAa,UAAU,IAAV,CADY;;AAG7B,QAAG,CAAC,iBAAiB,UAAjB,CAAD,EAA+B;AAChC,uBAAiB,UAAjB,IAA+B;AAC7B,iBAAS,EAAT;OADF,CADgC;KAAlC;;AAMA,qBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAApC,CAT6B;AAU7B,qBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAAI,SAAJ,EAApC,CAV6B;;AAY7B,QAAI,aAAa,iBAAiB,UAAjB,CAAb,CAZyB;AAa7B,QAAI,gBAAgB,EAAhB,CAbyB;;+BAerB;AACN,UAAI,aAAa,WAAW,OAAX,CAAmB,CAAnB,CAAb;;AAEJ,oBAAc,IAAd,OAAuB,aAAQ,WAAW,UAAX,CAA/B;;AAEA,sBAAgB,UAAhB,CAA2B,WAAW,UAAX,CAA3B,OAAsD,aAAQ,WAAW,UAAX,EAAyB,UAAC,GAAD,EAAM,GAAN,EAAc;AACnG,YAAI,KAAK,WAAW,IAAX,CAAgB,WAAW,UAAX,CAArB,CAD+F;;AAGnG,YAAI,SAAS,eAAe,OAAf,CAAuB,EAAvB,EAA2B,GAA3B,CAA+B,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC3D,cAAI,aAAa,IAAI,IAAJ,IAAY,IAAI,KAAJ,CAD8B;AAE3D,iBAAO,WAAW,IAAX,MAAqB,WAAW,OAAO,IAAP,CAAX,YAAmC,KAAnC,GAA2C,WAAW,OAAO,IAAP,CAAtD,GAAqE,CAAC,WAAW,OAAO,IAAP,CAAZ,CAArE,CAArB,CAFoD;SAAjB,CAAxC,CAH+F;;AAQnG,YAAI,iBAAiB,SAAjB,cAAiB,CAAC,QAAD,EAAc;AACjC,cAAI,WAAJ,CAAgB,WAAW,WAAX,CAAhB,CADiC;;AAGjC,cAAG,WAAW,WAAX,KAA2B,kBAA3B,EAA+C;AAChD,gBAAI,IAAJ,CAAS,QAAT,EADgD;WAAlD,MAEO;AACL,gBAAI,IAAJ,CAAS,QAAT,EADK;WAFP;SAHmB;;;AAR8E,YAmB/F,QAAQ,GAAG,KAAH,CAAS,WAAW,IAAX,EAAiB,MAA1B,CAAR,CAnB+F;;AAqBnG,YAAG,iBAAiB,OAAjB,EAA0B;AAC3B,gBACG,IADH,CACQ,UAAC,IAAD,EAAU;AACd,2BAAe,IAAf,EADc;WAAV,CADR,CAIG,KAJH,CAIS,UAAC,GAAD,EAAS;AACd,oBAAQ,KAAR,CAAc,GAAd,EADc;AAEd,2BAAe,EAAf,EAFc;WAAT,CAJT,CAD2B;SAA7B,MASO;AACL,yBAAe,KAAf,EADK;SATP;OArBqF,CAAvF;MApB2B;;AAe7B,SAAI,IAAI,IAAE,CAAF,EAAK,IAAE,WAAW,OAAX,CAAmB,MAAnB,EAA2B,GAA1C,EAA+C;YAAvC,GAAuC;KAA/C;;;AAf6B,GApDX;;;AA+GpB,YAAU,kBAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,WAApC,EAAoD;AAC5D,QAAI,aAAa,UAAU,WAAV,CAAsB,IAAtB,CAD2C;;AAG5D,QAAG,CAAC,iBAAiB,UAAjB,CAAD,EAA+B;AAChC,uBAAiB,UAAjB,IAA+B;AAC7B,iBAAS,EAAT;OADF,CADgC;KAAlC;;AAMA,qBAAiB,UAAjB,EAA6B,OAA7B,CAAqC,IAArC,CAA0C;AACxC,kBAAY,UAAZ;AACA,kBAAY,UAAZ;AACA,mBAAa,WAAb;KAHF,EAT4D;GAApD;;AAgBV,gBAAc,sBAAC,IAAD,EAAO,IAAP,EAAgB;AAC5B,oBAAgB,YAAhB,CAA6B,KAAK,IAAL,CAA7B,CAD4B;;AAG5B,QAAG,CAAC,iBAAiB,KAAK,IAAL,CAAjB,CAA4B,IAA5B,EAAkC;;AACpC,YAAI,mBAAmB,OAAO,mBAAP,CAA2B,KAAK,SAAL,CAA9C;AACJ,YAAI,wBAAwB,OAAO,mBAAP,CAA2B,KAAK,SAAL,CAAnD;;AAEJ,yBAAiB,MAAjB,CAAwB,UAAC,UAAD,EAAgB;AACtC,iBAAO,eAAe,aAAf,CAD+B;SAAhB,CAAxB,CAEG,OAFH,CAEW,sBAAc;AACvB,cAAI,sBAAsB,sBAAsB,OAAtB,CAA8B,UAA9B,KAA6C,CAA7C,CADH;;AAGvB,cAAI,CAAC,mBAAD,EAAsB;AACxB,oBAAQ,KAAR,qCAAgD,gCAA2B,KAAK,IAAL,+BAAmC,KAAK,IAAL,OAA9G,EADwB;AAExB,mBAAO,KAAP,CAFwB;WAA1B,MAGO;AACL,gBAAI,oBAAoB,IAAI,IAAJ,EAApB,CADC;AAEL,gBAAI,wBAAwB,kBAAkB,UAAlB,IAAgC,MAAhC,CAFvB;;AAIL,iBAAK,IAAI,KAAJ,IAAa,qBAAlB,EAAyC;AACvC,kBAAI,mBAAmB,eAAe,OAAf,CAAuB,KAAK,SAAL,CAAe,UAAf,CAAvB,CAAnB,CADmC;AAEvC,kBAAI,iBAAiB,iBAAiB,OAAjB,CAAyB,KAAzB,KAAmC,CAAnC,CAFkB;;AAIvC,kBAAI,CAAC,cAAD,EAAiB;AACnB,wBAAQ,KAAR,oCAA+C,2BAAsB,KAAK,IAAL,SAAa,0CAAqC,KAAK,IAAL,SAAa,sBAApI,EADmB;AAEnB,uBAAO,KAAP,CAFmB;eAArB;aAJF;WAPF;SAHS,CAFX;;AAwBA;aAAO;SAAP;UA5BoC;;;KAAtC,MA6BO;AACL,cAAQ,KAAR,iGAA4G,KAAK,IAAL,yCAA6C,iBAAiB,KAAK,IAAL,CAAjB,CAA4B,IAA5B,mCAA8D,KAAK,IAAL,yDAAvN,EADK;AAEL,aAAO,KAAP,CAFK;KA7BP;GAHY;;AAsCd,gBAAc,sBAAC,IAAD,EAAU;AACtB,QAAI,CAAC,gBAAgB,eAAhB,CAAgC,IAAhC,CAAD,EAAwC;AAC1C,uBAAiB,IAAjB,IAAyB;AACvB,cAAM,IAAN;AACA,oBAAY,EAAZ;AACA,sBAAc,EAAd;AACA,mBAAW,EAAX;AACA,iBAAS,EAAT;OALF,CAD0C;;AAS1C,sBAAgB,iBAAhB,CAAkC,IAAlC,EAT0C;KAA5C;GADY;;AAcd,mBAAiB,yBAAC,IAAD,EAAU;AACzB,WAAO,iBAAiB,IAAjB,CAAP,CADyB;GAAV;;AAIjB,qBAAmB,2BAAC,IAAD,EAAU;AAC3B,QAAI,sBAAsB,SAAtB,mBAAsB,CAAC,YAAD,EAAkB;mCAClC;AACN,YAAI,eAAe,aAAa,QAAb,CAAf;;AAEJ,YAAG,gBAAgB,eAAhB,CAAgC,YAAhC,KAAiD,iBAAiB,YAAjB,EAA+B,IAA/B,EAAqC;;AACvF,2BAAiB,IAAjB,EAAuB,IAAvB,CAA4B,QAA5B,IAAwC,iBAAiB,YAAjB,EAA+B,IAA/B,CAD+C;;AAGvF,kBAAQ,GAAR,CAAY,cAAZ,EAA4B,iBAAiB,YAAjB,EAA+B,IAA/B,CAAoC,WAApC,CAAgD,IAAhD,EAAsD,OAAlF,EAA2F,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,WAA5B,CAAwC,IAAxC,GAA+C,GAA/C,GAAqD,QAArD,CAA3F,CAHuF;SAAzF,MAIO;;AACL,cAAG,CAAC,gBAAgB,eAAhB,CAAgC,YAAhC,CAAD,EAAgD;AACjD,4BAAgB,YAAhB,CAA6B,YAA7B,EADiD;WAAnD;;AAIA,cAAI,kBAAkB,iBAAiB,YAAjB,EAA+B,UAA/B,CAA0C,IAA1C,IAAkD,EAAlD,CALjB;AAML,0BAAgB,QAAhB,IAA4B,UAAC,IAAD,EAAU;AACpC,6BAAiB,IAAjB,EAAuB,IAAvB,CAA4B,QAA5B,IAAwC,IAAxC,CADoC;;AAGpC,oBAAQ,GAAR,CAAY,eAAZ,EAA6B,KAAK,WAAL,CAAiB,IAAjB,EAAuB,OAApD,EAA6D,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,WAA5B,CAAwC,IAAxC,GAA+C,GAA/C,GAAqD,QAArD,CAA7D,CAHoC;WAAV,CANvB;SAJP;QAJwC;;AAC1C,WAAI,IAAI,QAAJ,IAAgB,YAApB,EAAkC;eAA1B,UAA0B;OAAlC;KADwB,CADC;;AAwB3B,QAAI,qBAAqB,SAArB,kBAAqB,CAAC,UAAD,EAAgB;AACvC,WAAI,IAAI,SAAJ,IAAiB,UAArB,EAAiC;AAC/B,YAAI,kBAAkB,WAAW,SAAX,CAAlB,CAD2B;;AAG/B,aAAI,IAAI,QAAJ,IAAgB,eAApB,EAAqC;AACnC,cAAI,mBAAmB,gBAAgB,QAAhB,CAAnB,CAD+B;AAEnC,2BAAiB,iBAAiB,IAAjB,EAAuB,IAAvB,CAAjB,CAFmC;SAArC;OAHF;KADuB,CAxBE;;AAmC3B,WAAO,OAAP,CAAe,iBAAiB,IAAjB,CAAf,EAAuC,UAAC,OAAD,EAAa;AAClD,UAAI,SAAS,QAAQ,MAAR,CAAe,UAAC,MAAD;eAAY,OAAO,IAAP,KAAgB,QAAhB;OAAZ,CAAf,CAAqD,CAArD,CAAT;;;AAD8C,yBAIlD,CAAoB,iBAAiB,IAAjB,EAAuB,YAAvB,CAApB;;;AAJkD,wBAOlD,CAAmB,iBAAiB,IAAjB,EAAuB,UAAvB,CAAnB,CAPkD;KAAb,CAAvC,CAnC2B;GAAV;;AA8CnB,iBAAe,uBAAC,IAAD,EAAO,QAAP,EAAiB,SAAjB,EAA+B;AAC5C,oBAAgB,YAAhB,CAA6B,IAA7B,EAD4C;AAE5C,qBAAiB,IAAjB,EAAuB,YAAvB,CAAoC,QAApC,IAAgD,SAAhD,CAF4C;GAA/B;;AAKf,qBAAmB,2BAAC,IAAD,EAAO,IAAP,EAAgB;AACjC,QAAG,gBAAgB,YAAhB,CAA6B,IAA7B,EAAmC,IAAnC,CAAH,EAA6C;AAC3C,uBAAiB,KAAK,IAAL,CAAjB,CAA4B,IAA5B,GAAmC,IAAI,IAAJ,EAAnC,CAD2C;KAA7C;GADiB;;AAMnB,sBAAoB,8BAAM;AACxB,WAAO,gBAAP,CADwB;GAAN;CAhPlB;;AAsPJ,QAAQ,eAAR,GAA0B,eAA1B","file":"moduleContainer.js","sourcesContent":["var fs = require('fs')\nvar path_module = require('path')\nvar NodeSpringUtil = require('./nodeSpringUtil').default\n\n\n// The unique module container\nvar modulesContainer = {}\n\n\nvar ModuleContainer = {\n\n  expressApp: null,\n\n  init: (app, appDir) => {\n    //NodeSpringUtil.configureLoggingOut()\n    ModuleContainer.expressApp = app\n  },\n\n  loadModules: (appDir) => {\n    let load = (path) => {\n      fs.lstat(path, (err, stat) => {\n        if(err)\n          throw err\n        else if (stat.isDirectory()) {\n          fs.readdir(path, (err, files) => {\n            let f, l = files.length\n            for (let i = 0; i < l; i++) {\n              f = path_module.join(path, files[i])\n              load(f)\n            }\n          })\n        } else {\n          if(path.indexOf('.map') < 0) {\n            //let compiledPath = path.replace('src', 'compiled')\n            //let moduleName = path_module.basename(compiledPath, '.js')\n\n            //console.log(\"Loading module => \", moduleName, ', From => ', compiledPath)\n            require(path).default\n          }\n        }\n      })\n    }\n\n    let baseDir = path_module.join(appDir)\n    load(baseDir)\n  },\n\n  addService(moduleDef) {\n    let moduleName = moduleDef.name\n\n    if(!modulesContainer[moduleName]) {\n      modulesContainer[moduleName] = {\n        type: 'service',\n        dependents: {},\n        dependencies: {}\n      }\n    }\n\n    modulesContainer[moduleName].impl = new moduleDef()\n  },\n\n  addController(moduleDef, path) {\n    let moduleName = moduleDef.name\n\n    if(!modulesContainer[moduleName]) {\n      modulesContainer[moduleName] = {\n        methods: []\n      }\n    }\n\n    modulesContainer[moduleName].path = path\n    modulesContainer[moduleName].impl = new moduleDef()\n\n    let moduleInfo = modulesContainer[moduleName]\n    let publishedURLs = []\n\n    for(let i=0; i<moduleInfo.methods.length; i++) {\n      let methodInfo = moduleInfo.methods[i]\n\n      publishedURLs.push(`/${path}/${methodInfo.methodName}`)\n\n      ModuleContainer.expressApp[methodInfo.httpMethod](`/${path}/${methodInfo.methodName}`, (req, res) => {\n        let fn = moduleInfo.impl[methodInfo.methodName]\n\n        let params = NodeSpringUtil.getArgs(fn).map((item, index) => {\n          let clientData = req.body || req.query\n          return clientData[item] || (clientData[item + '[]'] instanceof Array ? clientData[item + '[]'] : [clientData[item + '[]']])\n        })\n\n        let handleResponse = (response) => {\n          res.contentType(methodInfo.contentType)\n\n          if(methodInfo.contentType === 'application/json') {\n            res.json(response)\n          } else {\n            res.send(response)\n          }\n        }\n\n        // Getting method response\n        let value = fn.apply(moduleInfo.impl, params)\n\n        if(value instanceof Promise) {\n          value\n            .then((data) => {\n              handleResponse(data)\n            })\n            .catch((err) => {\n              console.error(err)\n              handleResponse([])\n            })\n        } else {\n          handleResponse(value)\n        }\n      })\n    }\n\n    //console.log('Published URLs => ', publishedURLs)\n  },\n\n  addRoute: (moduleDef, methodName, httpMethod, contentType) => {\n    let moduleName = moduleDef.constructor.name\n\n    if(!modulesContainer[moduleName]) {\n      modulesContainer[moduleName] = {\n        methods: []\n      }\n    }\n\n    modulesContainer[moduleName].methods.push({\n      methodName: methodName,\n      httpMethod: httpMethod,\n      contentType: contentType\n    })\n  },\n\n  validateImpl: (type, impl) => {\n    ModuleContainer.addInterface(type.name)\n\n    if(!modulesContainer[type.name].impl) {\n      let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n      let implementationMethods = Object.getOwnPropertyNames(impl.prototype)\n\n      interfaceMethods.filter((methodName) => {\n        return methodName !== 'constructor'\n      }).forEach(methodName => {\n        let isMethodImplemented = implementationMethods.indexOf(methodName) >= 0\n\n        if (!isMethodImplemented) {\n          console.error(`NodeSpring Error:\\nThe method \"${methodName}\" declared in ${type.name} is not implemented in ${impl.name}\\n`)\n          return false\n        } else {\n          let interfaceInstance = new type()\n          let interfaceMethodParams = interfaceInstance[methodName]().params\n\n          for (let param in interfaceMethodParams) {\n            let implMethodParams = NodeSpringUtil.getArgs(impl.prototype[methodName])\n            let isParamPresent = implMethodParams.indexOf(param) >= 0\n\n            if (!isParamPresent) {\n              console.error(`NodeSpring Error:\\nThe param \"${param}\" declared in ${type.name}.${methodName}(...) is not present in ${impl.name}.${methodName}(...)\\n`)\n              return false\n            }\n          }\n        }\n      })\n\n      return true\n    } else {\n      console.error(`NodeSpring Error: \\nThere are more than one implementations associated with the Interface: ${type.name}\\nThe current implementation is: ${modulesContainer[type.name].name}\\nPlease review the class: ${impl.name}, the Interfaces must only have one implementation\\n`)\n      return false\n    }\n  },\n\n  addInterface: (type) => {\n    if (!ModuleContainer.existsInterface(type)) {\n      modulesContainer[type] = {\n        impl: null,\n        dependents: {},\n        dependencies: {},\n        structure: {},\n        methods: []\n      }\n\n      ModuleContainer.injectionResolver(type)\n    }\n  },\n\n  existsInterface: (type) => {\n    return modulesContainer[type]\n  },\n\n  injectionResolver: (type) => {\n    let resolveDependencies = (dependencies) => {\n      for(let property in dependencies) {\n        let expectedType = dependencies[property]\n\n        if(ModuleContainer.existsInterface(expectedType) && modulesContainer[expectedType].impl) {      // Dependency resolved previously\n          modulesContainer[type].impl[property] = modulesContainer[expectedType].impl\n\n          console.log('Dispatching ', modulesContainer[expectedType].impl.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\n        } else {                                                                        // Dependency pending to be resolved\n          if(!ModuleContainer.existsInterface(expectedType)) {\n            ModuleContainer.addInterface(expectedType)\n          }\n\n          let myOwnDependents = modulesContainer[expectedType].dependents[type] = {}\n          myOwnDependents[property] = (impl) => {\n            modulesContainer[type].impl[property] = impl\n\n            console.log('Dispatchings ', impl.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\n          }\n        }\n      }\n    }\n\n    let dispatchDependents = (dependents) => {\n      for(let className in dependents) {\n        let classProperties = dependents[className]\n\n        for(let property in classProperties) {\n          let resolverCallback = classProperties[property]\n          resolverCallback(modulesContainer[type].impl)\n        }\n      }\n    }\n\n    Object.observe(modulesContainer[type], (changes) => {\n      let change = changes.filter((change) => change.type === 'update')[0]\n\n      // Resolve dependencies\n      resolveDependencies(modulesContainer[type].dependencies)\n\n      // Dispatch dependents\n      dispatchDependents(modulesContainer[type].dependents)\n    })\n  },\n\n  addDependency: (type, property, typeValue) => {\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].dependencies[property] = typeValue\n  },\n\n  addImplementation: (type, impl) => {\n    if(ModuleContainer.validateImpl(type, impl)) {\n      modulesContainer[type.name].impl = new impl()\n    }\n  },\n\n  getModuleContainer: () => {\n    return modulesContainer\n  }\n}\n\n\nexports.ModuleContainer = ModuleContainer"]}