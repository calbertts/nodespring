{"version":3,"sources":["../../src/core/moduleContainer.js"],"names":[],"mappings":"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","file":"moduleContainer.js","sourcesContent":["var fs = require('fs')\nvar path_module = require('path')\nvar NodeSpringUtil = require('./nodeSpringUtil').default\n\n\n// The unique module container\nglobal.modulesContainer = {}\nvar modulesContainer = global.modulesContainer\n\n\nvar ModuleContainer = {\n\n  expressApp: null,\n\n  init: (app, appDir) => {\n    //NodeSpringUtil.configureLoggingOut()\n    ModuleContainer.expressApp = app\n  },\n\n  loadModules: (appDir) => {\n    let load = (path) => {\n      fs.lstat(path, (err, stat) => {\n        if(err)\n          throw err\n        else if (stat.isDirectory()) {\n          fs.readdir(path, (err, files) => {\n            let f, l = files.length\n            for (let i = 0; i < l; i++) {\n              f = path_module.join(path, files[i])\n              load(f)\n            }\n          })\n        } else {\n          if(path.indexOf('.map') < 0) {\n            //let compiledPath = path.replace('src', 'compiled')\n            //let moduleName = path_module.basename(compiledPath, '.js')\n\n            //console.log(\"Loading module => \", moduleName, ', From => ', compiledPath)\n            require(path).default\n          }\n        }\n      })\n    }\n\n    let baseDir = path_module.join(appDir)\n    load(baseDir)\n  },\n\n  addService(moduleDef) {\n    let moduleName = moduleDef.name\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.runInjectionResolver(moduleName)\n  },\n\n  addController(moduleDef, path) {\n    let moduleName = moduleDef.name\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].path = path\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.runInjectionResolver(moduleName)\n\n    let moduleInfo = modulesContainer[moduleName]\n    let publishedURLs = []\n\n    for(let i=0; i<moduleInfo.methods.length; i++) {\n      let methodInfo = moduleInfo.methods[i]\n\n      publishedURLs.push(`/${path}/${methodInfo.methodName}`)\n\n      ModuleContainer.expressApp[methodInfo.httpMethod](`/${path}/${methodInfo.methodName}`, (req, res) => {\n        let fn = moduleInfo.impl[methodInfo.methodName]\n\n        let params = NodeSpringUtil.getArgs(fn).map((item, index) => {\n          let clientData = req.body || req.query\n          return clientData[item] || (clientData[item + '[]'] instanceof Array ? clientData[item + '[]'] : [clientData[item + '[]']])\n        })\n\n        let handleResponse = (response) => {\n          res.contentType(methodInfo.contentType)\n\n          if(methodInfo.contentType === 'application/json') {\n            res.json(response)\n          } else {\n            res.send(response)\n          }\n        }\n\n        // Getting method response\n        let value = fn.apply(moduleInfo.impl, params)\n\n        if(value instanceof Promise) {\n          value\n            .then((data) => {\n              handleResponse(data)\n            })\n            .catch((err) => {\n              console.error(err)\n              handleResponse([])\n            })\n        } else {\n          handleResponse(value)\n        }\n      })\n    }\n\n    //console.log('Published URLs => ', publishedURLs)\n  },\n\n  addRoute: (moduleDef, methodName, httpMethod, contentType) => {\n    let moduleName = moduleDef.constructor.name\n\n    // TODO: \"this\" object is wrong here\n    if(!modulesContainer[moduleName]) {\n      modulesContainer[moduleName] = {\n        methods: []\n      }\n    }\n\n    modulesContainer[moduleName].methods.push({\n      methodName: methodName,\n      httpMethod: httpMethod,\n      contentType: contentType\n    })\n  },\n\n  validateImpl: (type, impl) => {\n    ModuleContainer.addInterface(type.name)\n\n    if(!modulesContainer[type.name].impl) {\n      let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n      let implementationMethods = Object.getOwnPropertyNames(impl.prototype)\n\n      interfaceMethods.filter((methodName) => {\n        return methodName !== 'constructor'\n      }).forEach(methodName => {\n        let isMethodImplemented = implementationMethods.indexOf(methodName) >= 0\n\n        if (!isMethodImplemented) {\n          console.error(`NodeSpring Error:\\nThe method \"${methodName}\" declared in ${type.name} is not implemented in ${impl.name}\\n`)\n          return false\n        } else {\n          let interfaceInstance = new type()\n          let interfaceMethodParams = interfaceInstance[methodName]().params\n\n          for (let param in interfaceMethodParams) {\n            let implMethodParams = NodeSpringUtil.getArgs(impl.prototype[methodName])\n            let isParamPresent = implMethodParams.indexOf(param) >= 0\n\n            if (!isParamPresent) {\n              console.error(`NodeSpring Error:\\nThe param \"${param}\" declared in ${type.name}.${methodName}(...) is not present in ${impl.name}.${methodName}(...)\\n`)\n              return false\n            }\n          }\n        }\n      })\n\n      return true\n    } else {\n      console.error(`NodeSpring Error: \\nThere are more than one implementations associated with the Interface: ${type.name}\\nThe current implementation is: ${modulesContainer[type.name].name}\\nPlease review the class: ${impl.name}, the Interfaces must only have one implementation\\n`)\n      return false\n    }\n  },\n\n  addInterface: (type) => {\n    if (!ModuleContainer.existsInterface(type)) {\n      modulesContainer[type] = {\n        impl: null,\n        dependents: {},\n        dependencies: {},\n        structure: {},\n        methods: [],\n        instanceResolvedValue: false,\n        isInstanceResolved: () => {\n          if(modulesContainer[type].moduleType === 'service' || modulesContainer[type].moduleType === 'controller') {\n            return modulesContainer[type].impl !== null\n          } else {\n            return modulesContainer[type].instanceResolvedValue\n          }\n        },\n        getInstance: () => {\n          if(modulesContainer[type].moduleType === 'service' || modulesContainer[type].moduleType === 'controller') {\n            return new Promise((resolve, reject) => {\n              resolve(modulesContainer[type].impl)\n            })\n          } else {\n            let moduleInfo = modulesContainer[type]\n            let dependencies = moduleInfo.dependencies\n\n            if (Object.keys(dependencies).length > 0) {\n              let dependenciesInstancesPromises = []\n              let mapImplVariable = {}\n\n              for(let property in dependencies) {\n                let moduleNeeded = dependencies[property]\n\n                let promise = modulesContainer[moduleNeeded].getInstance()\n\n                mapImplVariable[moduleNeeded] = property\n\n                dependenciesInstancesPromises.push(promise)\n              }\n\n              return new Promise((resolve, reject) => {\n\n                /**\n                 * Wait for the dependencies are resolved to be injected\n                 * in the instance that's being created\n                 */\n                Promise.all(dependenciesInstancesPromises).then((instances) => {\n                  let mainInstance = new modulesContainer[type].impl()\n\n                  instances.forEach((instanceToInject) => {\n                    let varType = instanceToInject.constructor.interfaceName\n                    let property = mapImplVariable[varType]\n\n                    mainInstance[property] = instanceToInject\n                  })\n\n                  // Call the init method once all the dependencies are created and injected\n                  let postInjectMethod = modulesContainer[type].postInjectMethod\n\n                  if(postInjectMethod) {\n                    mainInstance[postInjectMethod]()\n                  }\n\n                  // Resolve the complete instance to the modules which are waiting for it\n                  resolve(mainInstance)\n                })\n              })\n            } else {\n              return new Promise((resolve, reject) => {\n                Object.observe(modulesContainer[type], (changes) => {\n                  let change = changes.filter((change) => change.type === 'update')[0]\n                  modulesContainer[type].instanceResolvedValue = true\n                  resolve(new modulesContainer[type].impl())\n                })\n              })\n            }\n          }\n        },\n        injectDependency: (property, impl) => {\n          modulesContainer[type].impl[property] = impl\n        }\n      }\n    }\n  },\n\n  existsInterface: (type) => {\n    return modulesContainer[type]\n  },\n\n  resolveDependencies: (type, dependencies) => {\n    for(let property in dependencies) {\n      let expectedType = dependencies[property]\n\n      if(ModuleContainer.existsInterface(expectedType) && modulesContainer[expectedType].isInstanceResolved()) {\n        modulesContainer[expectedType].getInstance().then((instance) => {\n          modulesContainer[type].injectDependency(property, instance)\n\n          console.log('Dispatching ', modulesContainer[expectedType].impl.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\n        })\n      } else {\n        if(!ModuleContainer.existsInterface(expectedType)) {\n          ModuleContainer.addInterface(expectedType)\n        }\n\n        let myOwnDependents = modulesContainer[expectedType].dependents[type] = {}\n        myOwnDependents[property] = (instance) => {\n          modulesContainer[type].injectDependency(property, instance)\n\n          console.log('Dispatchings ', instance.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\n        }\n      }\n    }\n  },\n\n  dispatchDependents: (type, dependents) => {\n    for(let className in dependents) {\n      let classProperties = dependents[className]\n\n      for(let property in classProperties) {\n        let resolverCallback = classProperties[property]\n        modulesContainer[type].getInstance().then((instance) => {\n          resolverCallback(instance)\n        })\n      }\n    }\n  },\n\n  runInjectionResolver: (type) => {\n    // Resolve dependencies\n    ModuleContainer.resolveDependencies(type, modulesContainer[type].dependencies)\n\n    // Dispatch dependents\n    ModuleContainer.dispatchDependents(type, modulesContainer[type].dependents)\n  },\n\n  addDependency: (type, property, typeToInject) => {\n    if(typeToInject.moduleType === 'controller')\n      throw new TypeError('You cannot inject a Controller as a dependency, please take a look on ' + type.name)\n\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].dependencies[property] = typeToInject.name\n  },\n\n  addImplementation: (type, impl) => {\n    if(ModuleContainer.validateImpl(type, impl)) {\n      modulesContainer[type.name].impl = impl\n\n      ModuleContainer.runInjectionResolver(type.name)\n\n      /*if(ModuleContainer.validateImpl(type, impl)) {\n       modulesContainer[type.name].impl = new impl()\n       ModuleContainer.runInjectionResolver(type.name)\n       }*/\n    }\n  },\n\n  addPostInjectMethod: (type, methodName) => {\n    modulesContainer[type].postInjectMethod = methodName\n  },\n\n  getModuleContainer: () => {\n    return modulesContainer\n  }\n}\n\n\nexports.ModuleContainer = ModuleContainer"]}