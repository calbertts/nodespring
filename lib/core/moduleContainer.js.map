{"version":3,"sources":["../../src/core/ModuleContainer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,OAAO,gBAAP,GAA0B,EAA1B;AACA,IAAI,mBAAmB,OAAO,gBAAP;;IAEF;;;;;;;yBAUP,QAAQ,eAAe,YAAqE;UAAzD,gEAAU,qBAA+C;UAAxC,oEAAc,qBAA0B;UAAnB,kEAAY,qBAAO;;AACtG,+BAAe,OAAf,GAAyB,OAAzB,CADsG;AAEtG,+BAAe,mBAAf,CAAmC,WAAnC,EAFsG;AAGtG,+BAAe,SAAf,GAA2B,SAA3B,CAHsG;;AAKtG,sBAAgB,MAAhB,GAAyB,MAAzB,CALsG;AAMtG,sBAAgB,UAAhB,GAA6B,UAA7B,CANsG;AAOtG,sBAAgB,aAAhB,GAAgC,iBAAiB,gBAAgB,aAAhB,CAPqD;;;;kCAUnF;;;AACnB,UAAI,OAAO,SAAP,IAAO,CAAC,IAAD,EAAU;AACnB,YAAI;AACF,cAAI,OAAO,aAAG,SAAH,CAAa,IAAb,CAAP,CADF;;AAGF,cAAI,KAAK,WAAL,EAAJ,EAAwB;AACtB,gBAAI,QAAQ,aAAG,WAAH,CAAe,IAAf,CAAR,CADkB;AAEtB,gBAAI,aAAJ;gBAAO,IAAI,MAAM,MAAN,CAFW;AAGtB,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAE,CAAF,EAAK,GAArB,EAA0B;AACxB,kBAAI,eAAY,IAAZ,CAAiB,IAAjB,EAAuB,MAAM,CAAN,CAAvB,CAAJ,CADwB;AAExB,mBAAK,CAAL,EAFwB;aAA1B;WAHF,MAOO;AACL,gBAAG,KAAK,OAAL,CAAa,MAAb,IAAuB,CAAvB,EAA0B;AAC3B,sBAAQ,IAAR,EAD2B;AAE3B,uCAAe,GAAf,CAAmB,qBAAqB,IAArB,CAAnB,CAF2B;aAA7B;WARF;SAHF,CAgBE,OAAM,CAAN,EAAS;AACT,gBAAM,kCAAwB,EAAE,OAAF,OAAxB,CAAN,CADS;SAAT;OAjBO,CADQ;;AAuBnB,UAAI,UAAU,eAAY,IAAZ,CAAiB,gBAAgB,MAAhB,CAA3B,CAvBe;AAwBnB,WAAK,OAAL;;;AAxBmB,qBA2BnB,CAAgB,aAAhB,CAA8B,wBAA9B,GA3BmB;;;;+BA8BH,WAAW;AAC3B,UAAI,aAAa,UAAU,WAAV,CADU;;AAG3B,sBAAgB,YAAhB,CAA6B,UAA7B,EAH2B;AAI3B,uBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAAI,SAAJ,EAApC,CAJ2B;AAK3B,uBAAiB,UAAjB,EAA6B,IAA7B,CAAkC,WAAlC,GAAgD,UAAU,WAAV,CALrB;AAM3B,uBAAiB,UAAjB,EAA6B,UAA7B,GAA0C,UAAU,UAAV,CANf;;AAQ3B,sBAAgB,mBAAhB,CAAoC,UAApC,EAR2B;;;;kCAWR,WAAW,MAAM,WAAW;AAC/C,UAAI,aAAa,UAAU,WAAV,CAD8B;;AAG/C,sBAAgB,YAAhB,CAA6B,UAA7B,EAH+C;AAI/C,uBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAApC,CAJ+C;AAK/C,uBAAiB,UAAjB,EAA6B,IAA7B,GAAoC,IAAI,SAAJ,EAApC,CAL+C;AAM/C,uBAAiB,UAAjB,EAA6B,IAA7B,CAAkC,WAAlC,GAAgD,UAAU,WAAV,CAND;AAO/C,uBAAiB,UAAjB,EAA6B,UAA7B,GAA0C,UAAU,UAAV,CAPK;;AAS/C,sBAAgB,mBAAhB,CAAoC,UAApC,EAT+C;;AAW/C,UAAI,aAAa,iBAAiB,UAAjB,CAAb,CAX2C;;AAa/C,UAAI,iBAAiB,SAAjB,cAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,UAAX,EAA0B;AAC7C,YAAI,KAAK,WAAW,IAAX,CAAgB,WAAW,UAAX,CAArB,CADyC;;AAG7C,wBAAgB,aAAhB,CAA8B,gBAA9B,CAA+C,GAA/C,EAAoD,UAAC,MAAD,EAAY;AAC9D,cAAI,aAAa,yBAAe,OAAf,CAAuB,EAAvB,EAA2B,GAA3B,CAA+B,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC/D,mBAAO,OAAO,IAAP,MAAiB,OAAO,OAAO,IAAP,CAAP,YAA+B,KAA/B,GAAuC,OAAO,OAAO,IAAP,CAA9C,GAA6D,CAAC,OAAO,OAAO,IAAP,CAAR,CAA7D,CAAjB,CADwD;WAAjB,CAA5C,CAD0D;;AAK9D,cAAI,iBAAiB,SAAjB,cAAiB,CAAC,IAAD,EAAU;AAC7B,4BAAgB,aAAhB,CAA8B,sBAA9B,CAAqD,GAArD,EAA0D,WAAW,WAAX,CAA1D,CAD6B;;AAG7B,gBAAG,WAAW,WAAX,KAA2B,kBAA3B,EAA+C;AAChD,8BAAgB,aAAhB,CAA8B,gBAA9B,CAA+C,GAA/C,EAAoD,IAApD,EADgD;aAAlD,MAEO;AACL,8BAAgB,aAAhB,CAA8B,gBAA9B,CAA+C,GAA/C,EAAoD,IAApD,EADK;aAFP;WAHmB;;;AALyC,YAgB9D,CAAG,OAAH,GAAa,GAAb,CAhB8D;AAiB9D,aAAG,QAAH,GAAc,GAAd,CAjB8D;AAkB9D,cAAI,QAAQ,GAAG,KAAH,CAAS,WAAW,IAAX,EAAiB,UAA1B,CAAR;;;AAlB0D,iBAqBvD,GAAG,OAAH,CArBuD;AAsB9D,iBAAO,GAAG,QAAH,CAtBuD;;AAwB9D,cAAG,UAAU,SAAV,EAAqB;AACtB,gBAAG,iBAAiB,OAAjB,EAA0B;AAC3B,oBACG,IADH,CACQ,UAAC,IAAD,EAAU;AACd,+BAAe,IAAf,EADc;eAAV,CADR,CAIG,KAJH,CAIS,UAAC,GAAD,EAAS;AACd,+BAAe,EAAf,EADc;eAAT,CAJT,CAD2B;aAA7B,MAQO;AACL,6BAAe,KAAf,EADK;aARP;WADF;SAxBkD,CAApD,CAH6C;OAA1B;;;;;AAb0B,qBA2D/C,CAAgB,aAAhB,CAA8B,kBAA9B,CAAiD,SAAjD,EAA4D,WAAW,eAAX,EAA4B,WAAW,IAAX,CAAxF;;;AA3D+C,qBA8D/C,CAAgB,aAAhB,CAA8B,OAA9B,CAAsC,KAAtC,QAAiD,IAAjD,EAAyD,UAAC,GAAD,EAAM,GAAN,EAAc;AACrE,uBAAe,GAAf,EAAoB,GAApB,EAAyB,EAAC,YAAY,OAAZ,EAA1B,EADqE;OAAd,CAAzD;;;AA9D+C,gBAmE/C,CAAW,OAAX,CAAmB,OAAnB,CAA2B,UAAC,UAAD,EAAgB;AACzC,wBAAgB,aAAhB,CAA8B,OAA9B,CAAsC,WAAW,UAAX,QAA2B,aAAQ,WAAW,UAAX,EAAyB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC9G,yBAAe,GAAf,EAAoB,GAApB,EAAyB,UAAzB,EAD8G;SAAd,CAAlG,CADyC;OAAhB,CAA3B,CAnE+C;;;;6BA0EjC,WAAW,YAAY,YAAY,aAAa;AAC9D,UAAI,aAAa,UAAU,WAAV,CAD6C;;AAG9D,sBAAgB,YAAhB,CAA6B,UAA7B,EAH8D;;AAK9D,uBAAiB,UAAjB,EAA6B,OAA7B,CAAqC,IAArC,CAA0C;AACxC,oBAAY,UAAZ;AACA,oBAAY,UAAZ;AACA,qBAAa,WAAb;OAHF,EAL8D;;;;sCAYvC,WAAW,YAAY,SAAS;AACvD,UAAI,aAAa,UAAU,WAAV,CADsC;;AAGvD,sBAAgB,YAAhB,CAA6B,UAA7B,EAHuD;;AAKvD,uBAAiB,UAAjB,EAA6B,eAA7B,CAA6C,IAA7C,CAAkD;AAChD,oBAAY,UAAZ;AACA,mBAAW,QAAQ,SAAR,GAAoB,QAAQ,SAAR,GAAoB,UAAxC;OAFb,EALuD;;;;iCAWrC,MAAM,MAAM;AAC9B,sBAAgB,YAAhB,CAA6B,KAAK,WAAL,CAA7B,CAD8B;;AAG9B,UAAI,mBAAmB,OAAO,mBAAP,CAA2B,KAAK,SAAL,CAA9C,CAH0B;AAI9B,UAAI,wBAAwB,OAAO,mBAAP,CAA2B,KAAK,SAAL,CAAnD,CAJ0B;;AAM9B,uBAAiB,MAAjB,CAAwB,UAAC,UAAD,EAAgB;AACtC,eAAO,eAAe,aAAf,CAD+B;OAAhB,CAAxB,CAEG,OAFH,CAEW,sBAAc;AACvB,YAAI,sBAAsB,sBAAsB,OAAtB,CAA8B,UAA9B,KAA6C,CAA7C,CADH;;AAGvB,YAAI,CAAC,mBAAD,EAAsB;AACxB,cAAI,gCAA8B,gCAA2B,KAAK,WAAL,+BAA0C,KAAK,IAAL,CAD/E;AAExB,cAAI,uBAAuB,kCAAwB,YAAxB,EAAsC,gBAAgB,iBAAhB,EAAmC,CAAzE,CAAvB,CAFoB;;AAIxB,mCAAe,wBAAf,CAAwC,oBAAxC,EAJwB;SAA1B,MAKO;AACL,mCAAe,OAAf,CAAuB,KAAK,SAAL,CAAe,UAAf,CAAvB,EAAmD,OAAnD,CAA2D,UAAC,KAAD,EAAW;AACpE,gBAAI,mBAAmB,yBAAe,OAAf,CAAuB,KAAK,SAAL,CAAe,UAAf,CAAvB,CAAnB,CADgE;AAEpE,gBAAI,iBAAiB,iBAAiB,OAAjB,CAAyB,KAAzB,KAAmC,CAAnC,CAF+C;;AAIpE,gBAAI,CAAC,cAAD,EAAiB;AACnB,kBAAI,+BAA6B,2BAAsB,KAAK,WAAL,SAAoB,0CAAqC,KAAK,IAAL,SAAa,oBAAzH,CADe;AAEnB,kBAAI,eAAe,kCAAwB,YAAxB,EAAsC,gBAAgB,iBAAhB,EAAmC,CAAzE,CAAf,CAFe;;AAInB,uCAAe,wBAAf,CAAwC,YAAxC,EAJmB;aAArB;WAJyD,CAA3D,CADK;SALP;OAHS,CAFX,CAN8B;;AA+B9B,aAAO,IAAP,CA/B8B;;;;iCAkCZ,MAAM;AACxB,UAAI,iBAAiB,IAAjB,MAA2B,SAA3B,EAAsC;AACxC,yBAAiB,IAAjB,IAAyB;AACvB,gBAAM,IAAN;AACA,wBAAc,EAAd;AACA,mBAAS,EAAT;AACA,2BAAiB,EAAjB;AACA,oCAA0B,KAA1B;AACA,uBAAa,uBAAM;AACjB,mBAAO,gBAAgB,mBAAhB,CAAoC,IAApC,CAAP,CADiB;WAAN;SANf,CADwC;OAA1C;;;;wCAcyB,MAAM;AAC/B,UAAI,aAAa,iBAAiB,IAAjB,CAAb,CAD2B;AAE/B,UAAI,eAAe,WAAW,YAAX,CAFY;;AAI/B,UAAI,iBAAiB,IAAjB,EAAuB,IAAvB,IAA+B,OAAO,IAAP,CAAY,YAAZ,EAA0B,MAA1B,GAAmC,CAAnC,EAAsC;;AACvE,cAAI,gCAAgC,EAAhC;AACJ,cAAI,kBAAkB,EAAlB;;AAEJ,eAAI,IAAI,QAAJ,IAAgB,YAApB,EAAkC;AAChC,gBAAI,eAAe,aAAa,QAAb,CAAf,CAD4B;AAEhC,gBAAI,UAAU,iBAAiB,YAAjB,EAA+B,WAA/B,EAAV,CAF4B;;AAIhC,4BAAgB,YAAhB,IAAgC,QAAhC,CAJgC;;AAMhC,0CAA8B,IAA9B,CAAmC,OAAnC,EANgC;WAAlC;;AASA;eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;;;;;;AAOtC,sBAAQ,GAAR,CAAY,6BAAZ,EAA2C,IAA3C,CAAgD,UAAC,SAAD,EAAe;;AAE7D,oBAAI,eAAe,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,KAA5B,KAAsC,WAAtC,GAAoD,IAAI,iBAAiB,IAAjB,EAAuB,IAAvB,EAAxD,GAAwF,iBAAiB,IAAjB,EAAuB,IAAvB,CAF9C;;AAI7D,0BAAU,OAAV,CAAkB,UAAC,gBAAD,EAAsB;AACtC,sBAAI,UAAU,iBAAiB,WAAjB,CAA6B,oBAA7B,IAAqD,iBAAiB,WAAjB,CAD7B;AAEtC,sBAAI,WAAW,gBAAgB,OAAhB,CAAX,CAFkC;;AAItC,+BAAa,QAAb,IAAyB,gBAAzB,CAJsC;iBAAtB,CAAlB;;;AAJ6D,oBAYzD,mBAAmB,iBAAiB,IAAjB,EAAuB,gBAAvB,CAZsC;;AAc7D,oBAAG,oBAAoB,CAAC,iBAAiB,IAAjB,EAAuB,wBAAvB,EAAiD;AACvE,+BAAa,gBAAb,IADuE;AAEvE,mCAAiB,IAAjB,EAAuB,wBAAvB,GAAkD,IAAlD,CAFuE;iBAAzE;;;AAd6D,uBAoB7D,CAAQ,YAAR,EApB6D;eAAf,CAAhD,CAqBG,KArBH,CAqBS,UAAC,GAAD,EAAS;AAChB,yCAAe,KAAf,CAAqB,8BAArB,EAAqD,IAArD,EAA2D,GAA3D,EADgB;AAEhB,uBAAO,GAAP,EAFgB;eAAT,CArBT,CAPsC;aAArB;WAAnB;YAbuE;;;OAAzE,MA8CO;;;;;;;AAOL,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,cAAG,iBAAiB,IAAjB,EAAuB,IAAvB,EAA6B;AAC9B,gBAAG,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,KAA5B,EAAmC;AACpC,kBAAG,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,KAA5B,KAAsC,WAAtC,EAAmD;AACpD,wBAAQ,iBAAiB,IAAjB,EAAuB,IAAvB,CAAR,CADoD;eAAtD,MAGK,IAAG,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,KAA5B,KAAsC,WAAtC,EACN,QAAQ,IAAI,iBAAiB,IAAjB,EAAuB,IAAvB,EAAZ,EADG;aAJP,MAMO;AACL,sBAAQ,iBAAiB,IAAjB,EAAuB,IAAvB,CAAR,CADK;aANP;WADF,MAUO;AACL,mBAAO,OAAP,CAAe,iBAAiB,IAAjB,CAAf,EAAuC,UAAC,OAAD,EAAa;AAClD,kBAAI,SAAS,QAAQ,MAAR,CAAe,UAAC,MAAD;uBAAY,OAAO,IAAP,KAAgB,QAAhB;eAAZ,CAAf,CAAqD,CAArD,CAAT,CAD8C;;AAGlD,kBAAG,OAAO,IAAP,CAAY,iBAAiB,IAAjB,EAAuB,YAAvB,CAAZ,CAAiD,MAAjD,GAA0D,CAA1D,EAA6D;AAC9D,iCAAiB,IAAjB,EAAuB,WAAvB,GAAqC,IAArC,CAA0C,UAAC,QAAD,EAAc;AACtD,0BAAQ,QAAR,EADsD;iBAAd,CAA1C,CAD8D;eAAhE,MAIO;AACL,wBAAQ,CAAC,iBAAiB,IAAjB,EAAuB,IAAvB,CAA4B,KAA5B,GAAoC,iBAAiB,IAAjB,EAAuB,IAAvB,GAA8B,IAAI,iBAAiB,IAAjB,EAAuB,IAAvB,EAAvE,CAAR,CADK;eAJP;aAHqC,CAAvC,CADK;WAVP;SADiB,CAAnB,CAPK;OA9CP;;;;kCAiFmB,MAAM,UAAU,cAAc;AACjD,sBAAgB,YAAhB,CAA6B,IAA7B,EADiD;AAEjD,uBAAiB,IAAjB,EAAuB,YAAvB,CAAoC,QAApC,IAAgD,aAAa,WAAb,CAFC;;;;sCAK1B,MAAM,MAAM;AACnC,UAAG,gBAAgB,YAAhB,CAA6B,IAA7B,EAAmC,IAAnC,CAAH,EAA6C;AAC3C,yBAAiB,KAAK,WAAL,CAAjB,CAAmC,IAAnC,GAA0C,IAAC,CAAK,KAAL,KAAe,WAAf,GAA8B,IAA/B,GAAsC,IAAI,IAAJ,EAAtC,CADC;AAE3C,wBAAgB,mBAAhB,CAAoC,KAAK,WAAL,CAApC,CAF2C;OAA7C;;;;wCAMyB,MAAM,YAAY;AAC3C,sBAAgB,YAAhB,CAA6B,IAA7B,EAD2C;AAE3C,uBAAiB,IAAjB,EAAuB,gBAAvB,GAA0C,UAA1C,CAF2C;;;;yCAKjB;AAC1B,aAAO,gBAAP,CAD0B;;;;SArTT;YAEZ,SAAS,aACT,aAAa,WACb,gBAAgB;AACrB,WAAS,mBAAM,EAAN;AACT,qBAAmB,6BAAM,EAAN;AACnB,sBAAoB,8BAAM,EAAN;;kBAPH","file":"ModuleContainer.js","sourcesContent":["/**\n * ModuleContainer\n * @author calbertts\n *\n * This class handles all the stuff relates with:\n *\n *    Controllers and HTTP methods\n *    Dependency Injection\n */\n\nimport fs from 'fs'\nimport path_module from 'path'\nimport NodeSpringUtil from './NodeSpringUtil'\nimport NodeSpringException from '../exceptions/NodeSpringException'\n\nglobal.modulesContainer = {}\nlet modulesContainer = global.modulesContainer\n\nexport default class ModuleContainer {\n\n  static appDir = null\n  static implConfig = {}\n  static nodeSpringApp = {\n    bindURL: () => {},\n    addSocketListener: () => {},\n    addSocketListeners: () => {}\n  }\n\n  static init(appDir, nodeSpringApp, implConfig, logging = false, loggingSync = false, debugging = false) {\n    NodeSpringUtil.logging = logging\n    NodeSpringUtil.configureLoggingOut(loggingSync)\n    NodeSpringUtil.debugging = debugging\n\n    ModuleContainer.appDir = appDir\n    ModuleContainer.implConfig = implConfig\n    ModuleContainer.nodeSpringApp = nodeSpringApp || ModuleContainer.nodeSpringApp\n  }\n\n  static loadModules() {\n    let load = (path) => {\n      try {\n        let stat = fs.lstatSync(path)\n\n        if (stat.isDirectory()) {\n          let files = fs.readdirSync(path)\n          let f, l = files.length\n          for (let i = 0; i<l; i++) {\n            f = path_module.join(path, files[i])\n            load(f)\n          }\n        } else {\n          if(path.indexOf('.map') < 0) {\n            require(path)\n            NodeSpringUtil.log(\"Loading file => \" + path)\n          }\n        }\n      } catch(e) {\n        throw new NodeSpringException(e.message, this)\n      }\n    }\n\n    let baseDir = path_module.join(ModuleContainer.appDir)\n    load(baseDir)\n\n    // All metadata is loaded except the injected instances\n    ModuleContainer.nodeSpringApp.configureSocketListeners()\n  }\n\n  static addService(moduleDef) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].impl.packagePath = moduleDef.packagePath\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.resolveDependencies(moduleName)\n  }\n\n  static addController(moduleDef, path, namespace) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n    modulesContainer[moduleName].path = path\n    modulesContainer[moduleName].impl = new moduleDef()\n    modulesContainer[moduleName].impl.packagePath = moduleDef.packagePath\n    modulesContainer[moduleName].moduleType = moduleDef.moduleType\n\n    ModuleContainer.resolveDependencies(moduleName)\n\n    let moduleInfo = modulesContainer[moduleName]\n\n    let processRequest = (req, res, methodInfo) => {\n      let fn = moduleInfo.impl[methodInfo.methodName]\n\n      ModuleContainer.nodeSpringApp.getRequestParams(req, (params) => {\n        let fullParams = NodeSpringUtil.getArgs(fn).map((item, index) => {\n          return params[item] || (params[item + '[]'] instanceof Array ? params[item + '[]'] : [params[item + '[]']])\n        })\n\n        let handleResponse = (data) => {\n          ModuleContainer.nodeSpringApp.setContentTypeResponse(res, methodInfo.contentType)\n\n          if(methodInfo.contentType === 'application/json') {\n            ModuleContainer.nodeSpringApp.sendJSONResponse(res, data)\n          } else {\n            ModuleContainer.nodeSpringApp.sendDataResponse(res, data)\n          }\n        }\n\n        // Getting method response\n        fn.request = req\n        fn.response = res\n        let value = fn.apply(moduleInfo.impl, fullParams)\n\n        // Clear\n        delete fn.request\n        delete fn.response\n\n        if(value !== undefined) {\n          if(value instanceof Promise) {\n            value\n              .then((data) => {\n                handleResponse(data)\n              })\n              .catch((err) => {\n                handleResponse([])\n              })\n          } else {\n            handleResponse(value)\n          }\n        }\n      })\n    }\n\n    /**\n     * This metadata is created in addSocketListener method\n     */\n    ModuleContainer.nodeSpringApp.addSocketListeners(namespace, moduleInfo.socketListeners, moduleInfo.impl)\n\n    // Bind index method\n    ModuleContainer.nodeSpringApp.bindURL('get', `/${path}`, (req, res) => {\n      processRequest(req, res, {methodName: 'index'})\n    })\n\n    // Bind the other endpoints\n    moduleInfo.methods.forEach((methodInfo) => {\n      ModuleContainer.nodeSpringApp.bindURL(methodInfo.httpMethod, `/${path}/${methodInfo.methodName}`, (req, res) => {\n        processRequest(req, res, methodInfo)\n      })\n    })\n  }\n\n  static addRoute(moduleDef, methodName, httpMethod, contentType) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n\n    modulesContainer[moduleName].methods.push({\n      methodName: methodName,\n      httpMethod: httpMethod,\n      contentType: contentType\n    })\n  }\n\n  static addSocketListener(moduleDef, methodName, options) {\n    let moduleName = moduleDef.packagePath\n\n    ModuleContainer.addInterface(moduleName)\n\n    modulesContainer[moduleName].socketListeners.push({\n      methodName: methodName,\n      eventName: options.eventName ? options.eventName : methodName\n    })\n  }\n\n  static validateImpl(type, impl) {\n    ModuleContainer.addInterface(type.packagePath)\n\n    let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\n    let implementationMethods = Object.getOwnPropertyNames(impl.prototype)\n\n    interfaceMethods.filter((methodName) => {\n      return methodName !== 'constructor'\n    }).forEach(methodName => {\n      let isMethodImplemented = implementationMethods.indexOf(methodName) >= 0\n\n      if (!isMethodImplemented) {\n        let errorMessage = `The method \"${methodName}\" declared in ${type.packagePath} is not implemented in ${impl.name}`\n        let methodNotImplemented = new NodeSpringException(errorMessage, ModuleContainer.addImplementation, 1)\n\n        NodeSpringUtil.throwNodeSpringException(methodNotImplemented)\n      } else {\n        NodeSpringUtil.getArgs(type.prototype[methodName]).forEach((param) => {\n          let implMethodParams = NodeSpringUtil.getArgs(impl.prototype[methodName])\n          let isParamPresent = implMethodParams.indexOf(param) >= 0\n\n          if (!isParamPresent) {\n            let errorMessage = `The param \"${param}\" declared in ${type.packagePath}.${methodName}(...) is not present in ${impl.name}.${methodName}(...)`\n            let missingParam = new NodeSpringException(errorMessage, ModuleContainer.addImplementation, 1)\n\n            NodeSpringUtil.throwNodeSpringException(missingParam)\n          }\n        })\n      }\n    })\n\n    return true\n  }\n\n  static addInterface(type) {\n    if (modulesContainer[type] === undefined) {\n      modulesContainer[type] = {\n        impl: null,\n        dependencies: {},\n        methods: [],\n        socketListeners: [],\n        postInjectMethodExecuted: false,\n        getInstance: () => {\n          return ModuleContainer.resolveDependencies(type)\n        }\n      }\n    }\n  }\n\n  static resolveDependencies(type) {\n    let moduleInfo = modulesContainer[type]\n    let dependencies = moduleInfo.dependencies\n\n    if (modulesContainer[type].impl && Object.keys(dependencies).length > 0) {\n      let dependenciesInstancesPromises = []\n      let mapImplVariable = {}\n\n      for(let property in dependencies) {\n        let moduleNeeded = dependencies[property]\n        let promise = modulesContainer[moduleNeeded].getInstance()\n\n        mapImplVariable[moduleNeeded] = property\n\n        dependenciesInstancesPromises.push(promise)\n      }\n\n      return new Promise((resolve, reject) => {\n\n        /**\n         * Wait for the dependencies are resolved to be injected\n         * in the instance that's being created\n         */\n\n        Promise.all(dependenciesInstancesPromises).then((instances) => {\n\n          let mainInstance = modulesContainer[type].impl.scope === 'prototype' ? new modulesContainer[type].impl() : modulesContainer[type].impl\n\n          instances.forEach((instanceToInject) => {\n            let varType = instanceToInject.constructor.interfacePackagePath || instanceToInject.packagePath\n            let property = mapImplVariable[varType]\n\n            mainInstance[property] = instanceToInject\n          })\n\n          // Call the init method once all the dependencies are created and injected\n          let postInjectMethod = modulesContainer[type].postInjectMethod\n\n          if(postInjectMethod && !modulesContainer[type].postInjectMethodExecuted) {\n            mainInstance[postInjectMethod]()\n            modulesContainer[type].postInjectMethodExecuted = true\n          }\n\n          // Resolve the complete instance to the modules which are waiting for it\n          resolve(mainInstance)\n        }).catch((err) => {\n          NodeSpringUtil.error('Error resolving instance for', type, err)\n          reject(err)\n        })\n      })\n    } else {\n\n      /**\n       * If the module doesn't have dependencies, returns the impl if it's loaded or\n       * will wait for the implementation that is loaded to dispatch the instance.\n       */\n\n      return new Promise((resolve, reject) => {\n        if(modulesContainer[type].impl) {\n          if(modulesContainer[type].impl.scope) {\n            if(modulesContainer[type].impl.scope === 'singleton') {\n              resolve(modulesContainer[type].impl)\n            }\n            else if(modulesContainer[type].impl.scope === 'prototype')\n              resolve(new modulesContainer[type].impl())\n          } else {\n            resolve(modulesContainer[type].impl)\n          }\n        } else {\n          Object.observe(modulesContainer[type], (changes) => {\n            let change = changes.filter((change) => change.type === 'update')[0]\n\n            if(Object.keys(modulesContainer[type].dependencies).length > 0) {\n              modulesContainer[type].getInstance().then((instance) => {\n                resolve(instance)\n              })\n            } else {\n              resolve(!modulesContainer[type].impl.scope ? modulesContainer[type].impl : new modulesContainer[type].impl())\n            }\n          })\n        }\n      })\n    }\n  }\n\n  static addDependency(type, property, typeToInject) {\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].dependencies[property] = typeToInject.packagePath\n  }\n\n  static addImplementation(type, impl) {\n    if(ModuleContainer.validateImpl(type, impl)) {\n      modulesContainer[type.packagePath].impl = (impl.scope === 'prototype') ? impl : new impl()\n      ModuleContainer.resolveDependencies(type.packagePath)\n    }\n  }\n\n  static addPostInjectMethod(type, methodName) {\n    ModuleContainer.addInterface(type)\n    modulesContainer[type].postInjectMethod = methodName\n  }\n\n  static getModuleContainer() {\n    return modulesContainer\n  }\n}\n"]}