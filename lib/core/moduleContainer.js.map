{"version":3,"sources":["../../src/core/moduleContainer.js"],"names":[],"mappings":"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","file":"moduleContainer.js","sourcesContent":["var fs = require('fs')\r\nvar path_module = require('path')\r\nvar NodeSpringUtil = require('./nodeSpringUtil').default\r\n\r\n\r\n// The unique module container\r\nvar modulesContainer = {}\r\n\r\n\r\nvar ModuleContainer = {\r\n\r\n  expressApp: null,\r\n\r\n  init: (app, appDir) => {\r\n    //NodeSpringUtil.configureLoggingOut()\r\n    ModuleContainer.expressApp = app\r\n  },\r\n\r\n  loadModules: (appDir) => {\r\n    let load = (path) => {\r\n      fs.lstat(path, (err, stat) => {\r\n        if(err)\r\n          throw err\r\n        else if (stat.isDirectory()) {\r\n          fs.readdir(path, (err, files) => {\r\n            let f, l = files.length\r\n            for (let i = 0; i < l; i++) {\r\n              f = path_module.join(path, files[i])\r\n              load(f)\r\n            }\r\n          })\r\n        } else {\r\n          if(path.indexOf('.map') < 0) {\r\n            //let compiledPath = path.replace('src', 'compiled')\r\n            //let moduleName = path_module.basename(compiledPath, '.js')\r\n\r\n            //console.log(\"Loading module => \", moduleName, ', From => ', compiledPath)\r\n            require(path).default\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    let baseDir = path_module.join(appDir)\r\n    load(baseDir)\r\n  },\r\n\r\n  addService(moduleDef) {\r\n    let moduleName = moduleDef.name\r\n\r\n    ModuleContainer.addInterface(moduleName)\r\n    modulesContainer[moduleName].impl = new moduleDef()\r\n\r\n    ModuleContainer.runInjectionResolver(moduleName)\r\n  },\r\n\r\n  addController(moduleDef, path) {\r\n    let moduleName = moduleDef.name\r\n\r\n    ModuleContainer.addInterface(moduleName)\r\n    modulesContainer[moduleName].path = path\r\n    modulesContainer[moduleName].impl = new moduleDef()\r\n\r\n    ModuleContainer.runInjectionResolver(moduleName)\r\n\r\n    let moduleInfo = modulesContainer[moduleName]\r\n    let publishedURLs = []\r\n\r\n    for(let i=0; i<moduleInfo.methods.length; i++) {\r\n      let methodInfo = moduleInfo.methods[i]\r\n\r\n      publishedURLs.push(`/${path}/${methodInfo.methodName}`)\r\n\r\n      ModuleContainer.expressApp[methodInfo.httpMethod](`/${path}/${methodInfo.methodName}`, (req, res) => {\r\n        let fn = moduleInfo.impl[methodInfo.methodName]\r\n\r\n        let params = NodeSpringUtil.getArgs(fn).map((item, index) => {\r\n          let clientData = req.body || req.query\r\n          return clientData[item] || (clientData[item + '[]'] instanceof Array ? clientData[item + '[]'] : [clientData[item + '[]']])\r\n        })\r\n\r\n        let handleResponse = (response) => {\r\n          res.contentType(methodInfo.contentType)\r\n\r\n          if(methodInfo.contentType === 'application/json') {\r\n            res.json(response)\r\n          } else {\r\n            res.send(response)\r\n          }\r\n        }\r\n\r\n        // Getting method response\r\n        let value = fn.apply(moduleInfo.impl, params)\r\n\r\n        if(value instanceof Promise) {\r\n          value\r\n            .then((data) => {\r\n              handleResponse(data)\r\n            })\r\n            .catch((err) => {\r\n              console.error(err)\r\n              handleResponse([])\r\n            })\r\n        } else {\r\n          handleResponse(value)\r\n        }\r\n      })\r\n    }\r\n\r\n    //console.log('Published URLs => ', publishedURLs)\r\n  },\r\n\r\n  addRoute: (moduleDef, methodName, httpMethod, contentType) => {\r\n    let moduleName = moduleDef.constructor.name\r\n\r\n    // TODO: \"this\" object is wrong here\r\n    if(!modulesContainer[moduleName]) {\r\n      modulesContainer[moduleName] = {\r\n        methods: []\r\n      }\r\n    }\r\n\r\n    modulesContainer[moduleName].methods.push({\r\n      methodName: methodName,\r\n      httpMethod: httpMethod,\r\n      contentType: contentType\r\n    })\r\n  },\r\n\r\n  validateImpl: (type, impl) => {\r\n    ModuleContainer.addInterface(type.name)\r\n\r\n    if(!modulesContainer[type.name].impl) {\r\n      let interfaceMethods = Object.getOwnPropertyNames(type.prototype)\r\n      let implementationMethods = Object.getOwnPropertyNames(impl.prototype)\r\n\r\n      interfaceMethods.filter((methodName) => {\r\n        return methodName !== 'constructor'\r\n      }).forEach(methodName => {\r\n        let isMethodImplemented = implementationMethods.indexOf(methodName) >= 0\r\n\r\n        if (!isMethodImplemented) {\r\n          console.error(`NodeSpring Error:\\nThe method \"${methodName}\" declared in ${type.name} is not implemented in ${impl.name}\\n`)\r\n          return false\r\n        } else {\r\n          let interfaceInstance = new type()\r\n          let interfaceMethodParams = interfaceInstance[methodName]().params\r\n\r\n          for (let param in interfaceMethodParams) {\r\n            let implMethodParams = NodeSpringUtil.getArgs(impl.prototype[methodName])\r\n            let isParamPresent = implMethodParams.indexOf(param) >= 0\r\n\r\n            if (!isParamPresent) {\r\n              console.error(`NodeSpring Error:\\nThe param \"${param}\" declared in ${type.name}.${methodName}(...) is not present in ${impl.name}.${methodName}(...)\\n`)\r\n              return false\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      return true\r\n    } else {\r\n      console.error(`NodeSpring Error: \\nThere are more than one implementations associated with the Interface: ${type.name}\\nThe current implementation is: ${modulesContainer[type.name].name}\\nPlease review the class: ${impl.name}, the Interfaces must only have one implementation\\n`)\r\n      return false\r\n    }\r\n  },\r\n\r\n  addInterface: (type) => {\r\n    if (!ModuleContainer.existsInterface(type)) {\r\n      modulesContainer[type] = {\r\n        impl: null,\r\n        dependents: {},\r\n        dependencies: {},\r\n        structure: {},\r\n        methods: [],\r\n        isInstanceResolved: () => {\r\n          return modulesContainer[type].impl !== null\r\n        },\r\n        getInstance: (callbk) => {\r\n          callbk(modulesContainer[type].impl)\r\n        },\r\n        injectDependency: (property, impl) => {\r\n          modulesContainer[type].impl[property] = impl\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  existsInterface: (type) => {\r\n    return modulesContainer[type]\r\n  },\r\n\r\n  resolveDependencies: (type, dependencies) => {\r\n    for(let property in dependencies) {\r\n      let expectedType = dependencies[property]\r\n\r\n      if(ModuleContainer.existsInterface(expectedType) && modulesContainer[expectedType].isInstanceResolved()) {\r\n        modulesContainer[expectedType].getInstance((instance) => {\r\n          modulesContainer[type].injectDependency(property, instance)\r\n        })\r\n\r\n        console.log('Dispatching ', modulesContainer[expectedType].impl.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\r\n      } else {\r\n        if(!ModuleContainer.existsInterface(expectedType)) {\r\n          ModuleContainer.addInterface(expectedType)\r\n        }\r\n\r\n        let myOwnDependents = modulesContainer[expectedType].dependents[type] = {}\r\n        myOwnDependents[property] = (instance) => {\r\n          modulesContainer[type].injectDependency(property, instance)\r\n\r\n          console.log('Dispatchings ', instance.constructor.name, ' for ', modulesContainer[type].impl.constructor.name + '.' + property)\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  dispatchDependents: (type, dependents) => {\r\n    for(let className in dependents) {\r\n      let classProperties = dependents[className]\r\n\r\n      for(let property in classProperties) {\r\n        let resolverCallback = classProperties[property]\r\n        modulesContainer[type].getInstance((instance) => {\r\n          resolverCallback(instance)\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  runInjectionResolver: (type) => {\r\n    // Resolve dependencies\r\n    ModuleContainer.resolveDependencies(type, modulesContainer[type].dependencies)\r\n\r\n    // Dispatch dependents\r\n    ModuleContainer.dispatchDependents(type, modulesContainer[type].dependents)\r\n  },\r\n\r\n  addDependency: (type, property, typeToInject) => {\r\n    if(typeToInject.moduleType === 'controller')\r\n      throw new TypeError('You cannot inject a Controller as a dependency, please take a look on ' + type.name)\r\n\r\n    ModuleContainer.addInterface(type)\r\n    modulesContainer[type].dependencies[property] = typeToInject.name\r\n  },\r\n\r\n  addImplementation: (type, impl) => {\r\n    if(ModuleContainer.validateImpl(type, impl)) {\r\n      modulesContainer[type.name].impl = new impl()\r\n      ModuleContainer.runInjectionResolver(type.name)\r\n    }\r\n  },\r\n\r\n  getModuleContainer: () => {\r\n    return modulesContainer\r\n  }\r\n}\r\n\r\n\r\nexports.ModuleContainer = ModuleContainer"]}