{"version":3,"sources":["../../src/core/NodeSpringUtil.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAQqB,c;WAAA,c;0BAAA,c;;;eAAA,c;;;;;;;;;;4BAYH,I,EAAM;;;AAGpB,UAAI,OAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,0BAAtB,EAAkD,CAAlD,CAAX;;;AAGA,aAAO,KAAK,KAAL,CAAW,GAAX,EAAgB,GAAhB,CAAoB,UAAC,GAAD,EAAS;;;AAGlC,eAAO,IAAI,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,EAA8B,IAA9B,EAAP;AACD,OAJM,EAIJ,MAJI,CAIG,UAAC,GAAD,EAAS;;;AAGjB,eAAO,GAAP;AACD,OARM,CAAP;AASD;;;;;;;;;wCAM0B,W,EAAa;AACtC,qBAAe,WAAf,GAA6B,WAA7B;;AAEA,UAAG,eAAe,WAAlB,EACA;AAAA;AACE,cAAI,UAAU,aAAG,iBAAH,CAAqB,gBAArB,EAAuC,EAAE,OAAO,GAAT,EAAvC,CAAd;AACA,cAAI,YAAY,QAAQ,MAAxB;;AAEA,kBAAQ,GAAR,GAAc,YAAY;AACxB,oBAAQ,KAAR,CAAc,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAAnD;AACA,sBAAU,KAAV,CAAgB,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAArD;AACD,WAHD;AAIA,kBAAQ,KAAR,GAAgB,QAAQ,GAAxB;AARF;AASC;AACF;;;0BAEY;AACX,UAAG,eAAe,OAAlB,EACE,QAAQ,GAAR,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB;AACH;;;4BAEc;AACb,UAAG,eAAe,OAAlB,EACE,QAAQ,KAAR,CAAc,KAAd,CAAoB,IAApB,EAA0B,SAA1B;AACH;;;4BAEc;AACb,UAAG,eAAe,SAAlB,EAA6B;AAC3B,gBAAQ,GAAR,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB;AACD;AACF;;;;;;;;;;6CAO+B,S,EAAW;;AAEzC,UAAG,aAAa,OAAO,UAAU,KAAjB,KAA2B,QAA3C,EAAqD;AACnD,gBAAQ,KAAR,CAAc,IAAd,EAAoB,UAAU,KAA9B;AACD;;AAED,YAAM,SAAN;AACD;;;;;;;;;;;4BAQc,K,EAAO;AACpB,aAAO,SAAS,MAAM,WAAN,KAAsB,QAAtC;AACD;;;;;;;;;+BAMiB;;AAEhB,UAAI,wBAAwB,MAAM,iBAAlC;;;AAGA,YAAM,iBAAN,GAA0B,UAAU,CAAV,EAAa,KAAb,EAAoB;AAC5C,eAAO,KAAP;AACD,OAFD;;;AAKA,UAAI,MAAM,IAAI,KAAJ,EAAV;;;AAGA,UAAI,QAAQ,IAAI,KAAhB;;;AAGA,YAAM,iBAAN,GAA0B,qBAA1B;;;AAGA,YAAM,KAAN;AACA,YAAM,KAAN;;AAEA,UAAG,MAAM,MAAN,GAAe,CAAlB,EAAqB;AACnB,YAAI,QAAQ,MAAM,CAAN,CAAZ;;AAEA,eAAO,MAAM,WAAN,EAAP;AACD,OAJD,MAIO,OAAO,EAAP;AACR;;;SAxHkB,c;YAEZ,O,GAAU,K,SACV,W,GAAc,K,SACd,S,GAAY,K;kBAJA,c","file":"NodeSpringUtil.js","sourcesContent":["/**\n * NodeSpringUtil\n * @author calbertts\n */\n\nimport fs from 'fs'\nimport util from 'util'\n\nexport default class NodeSpringUtil {\n\n  static logging = false\n  static loggingSync = false\n  static debugging = false\n\n  /**\n   * Method to get the arguments' names\n   *\n   * @param func\n   * @returns {Array.<String>}\n   */\n  static getArgs (func) {\n\n    // First match everything inside the function argument parens.\n    let args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1]\n\n    // Split the arguments string into an array comma delimited.\n    return args.split(',').map((arg) => {\n\n      // Ensure no inline comments are parsed and trim the whitespace.\n      return arg.replace(/\\/\\*.*\\*\\//, '').trim()\n    }).filter((arg) => {\n\n      // Ensure no undefined values are added.\n      return arg\n    })\n  }\n\n  /**\n   * Send all the console.log/error output to a file\n   * This is pretty useful to see a synchronous log\n   */\n  static configureLoggingOut(loggingSync) {\n    NodeSpringUtil.loggingSync = loggingSync\n\n    if(NodeSpringUtil.loggingSync)\n    {\n      let logFile = fs.createWriteStream('nodespring.log', { flags: 'w' })\n      let logStdout = process.stdout\n\n      console.log = function () {\n        logFile.write(util.format.apply(null, arguments) + '\\n')\n        logStdout.write(util.format.apply(null, arguments) + '\\n')\n      }\n      console.error = console.log\n    }\n  }\n\n  static log() {\n    if(NodeSpringUtil.logging)\n      console.log.apply(this, arguments)\n  }\n\n  static error() {\n    if(NodeSpringUtil.logging)\n      console.error.apply(this, arguments)\n  }\n\n  static debug() {\n    if(NodeSpringUtil.debugging) {\n      console.log.apply(this, arguments)\n    }\n  }\n\n  /**\n   * This method gives a specific format for exceptions and stop the application\n   *\n   * @param exception Exception to throw\n   */\n  static throwNodeSpringException(exception) {\n\n    if(exception && typeof exception.stack === 'string') {\n      console.error('\\n', exception.stack)\n    }\n\n    throw exception\n  }\n\n  /**\n   * Method to check if a value is a class\n   *\n   * @param param Any kind of object to check if it's a class\n   * @returns {*|boolean}\n   */\n  static isClass(param) {\n    return param && param.constructor === Function\n  }\n\n  /**\n   * Returns the stack from the caller discarding the two first elements\n   * @returns {void|string|XML|*}\n   */\n  static getStack() {\n    // Save original Error.prepareStackTrace\n    var origPrepareStackTrace = Error.prepareStackTrace\n\n    // Override with function that just returns `stack`\n    Error.prepareStackTrace = function (_, stack) {\n      return stack\n    }\n\n    // Create a new `Error`, which automatically gets `stack`\n    var err = new Error()\n\n    // Evaluate `err.stack`, which calls our new `Error.prepareStackTrace`\n    var stack = err.stack\n\n    // Restore original `Error.prepareStackTrace`\n    Error.prepareStackTrace = origPrepareStackTrace\n\n    // Remove superfluous function call on stack\n    stack.shift()\n    stack.shift()\n\n    if(stack.length > 0) {\n      let frame = stack[0]\n\n      return frame.getFileName()\n    } else return ''\n  }\n}\n"]}