{"version":3,"sources":["../../src/core/NodeSpringUtil.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAQqB;;;;;;;;;;;;;;;4BAUH,MAAM;;;AAGpB,UAAI,OAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,0BAAtB,EAAkD,CAAlD,CAAP;;;AAHgB,aAMb,KAAK,KAAL,CAAW,GAAX,EAAgB,GAAhB,CAAoB,UAAC,GAAD,EAAS;;;AAGlC,eAAO,IAAI,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,EAA8B,IAA9B,EAAP,CAHkC;OAAT,CAApB,CAIJ,MAJI,CAIG,UAAC,GAAD,EAAS;;;AAGjB,eAAO,GAAP,CAHiB;OAAT,CAJV,CANoB;;;;;;;;;;wCAqBK,SAAS,aAAa;AAC/C,UAAG,OAAH,EAAY;AACV,uBAAe,OAAf,GAAyB,OAAzB,CADU;OAAZ;;AAIA,UAAG,WAAH,EAAgB;;AACd,cAAI,UAAU,aAAG,iBAAH,CAAqB,gBAArB,EAAuC,EAAE,OAAO,GAAP,EAAzC,CAAV;AACJ,cAAI,YAAY,QAAQ,MAAR;;AAEhB,kBAAQ,GAAR,GAAc,YAAY;AACxB,oBAAQ,KAAR,CAAc,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAArC,CAAd,CADwB;AAExB,sBAAU,KAAV,CAAgB,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAArC,CAAhB,CAFwB;WAAZ;AAId,kBAAQ,KAAR,GAAgB,QAAQ,GAAR;aARF;OAAhB;;;;0BAYW;AACX,UAAG,eAAe,OAAf,EACD,QAAQ,GAAR,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,EADF;;;;4BAIa;AACb,UAAG,eAAe,OAAf,EACD,QAAQ,KAAR,CAAc,KAAd,CAAoB,IAApB,EAA0B,SAA1B,EADF;;;;;;;;;;;6CAS8B,WAAW;;AAEzC,UAAG,OAAO,UAAU,KAAV,KAAoB,QAA3B,EAAqC;AACtC,gBAAQ,KAAR,CAAc,IAAd,EAAoB,UAAU,KAAV,CAApB,CADsC;OAAxC;;AAIA,YAAM,SAAN,CANyC;;;;;;;;;;;;4BAe5B,OAAO;AACpB,aAAO,SAAS,MAAM,WAAN,KAAsB,QAAtB,CADI;;;;;;;;;;+BAQJ;;AAEhB,UAAI,wBAAwB,MAAM,iBAAN;;;AAFZ,WAKhB,CAAM,iBAAN,GAA0B,UAAU,CAAV,EAAa,KAAb,EAAoB;AAC5C,eAAO,KAAP,CAD4C;OAApB;;;AALV,UAUZ,MAAM,IAAI,KAAJ,EAAN;;;AAVY,UAaZ,QAAQ,IAAI,KAAJ;;;AAbI,WAgBhB,CAAM,iBAAN,GAA0B,qBAA1B;;;AAhBgB,WAmBhB,CAAM,KAAN,GAnBgB;AAoBhB,YAAM,KAAN;;;;;;AApBgB,UA0BZ,QAAQ,MAAM,CAAN,CAAR,CA1BY;;AA4BhB,aAAO,MAAM,WAAN,EAAP;AA5BgB;;;SAtFC;YAEZ,UAAU;kBAFE","file":"NodeSpringUtil.js","sourcesContent":["/**\n * NodeSpringUtil\n * @author calbertts\n */\n\nimport fs from 'fs'\nimport util from 'util'\n\nexport default class NodeSpringUtil {\n\n  static logging = false\n\n  /**\n   * Method to get the arguments' names\n   *\n   * @param func\n   * @returns {Array.<String>}\n   */\n  static getArgs (func) {\n\n    // First match everything inside the function argument parens.\n    let args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1]\n\n    // Split the arguments string into an array comma delimited.\n    return args.split(',').map((arg) => {\n\n      // Ensure no inline comments are parsed and trim the whitespace.\n      return arg.replace(/\\/\\*.*\\*\\//, '').trim()\n    }).filter((arg) => {\n\n      // Ensure no undefined values are added.\n      return arg\n    })\n  }\n\n  /**\n   * Send all the console.log/error output to a file\n   * This is pretty useful to see a synchronous log\n   */\n  static configureLoggingOut(logging, loggingSync) {\n    if(logging) {\n      NodeSpringUtil.logging = logging\n    }\n\n    if(loggingSync) {\n      let logFile = fs.createWriteStream('nodespring.log', { flags: 'w' });\n      let logStdout = process.stdout;\n\n      console.log = function () {\n        logFile.write(util.format.apply(null, arguments) + '\\n');\n        logStdout.write(util.format.apply(null, arguments) + '\\n');\n      }\n      console.error = console.log;\n    }\n  }\n\n  static log() {\n    if(NodeSpringUtil.logging)\n      console.log.apply(this, arguments)\n  }\n\n  static error() {\n    if(NodeSpringUtil.logging)\n      console.error.apply(this, arguments)\n  }\n\n  /**\n   * This method gives a specific format for exceptions and stop the application\n   *\n   * @param exception Exception to throw\n   */\n  static throwNodeSpringException(exception) {\n\n    if(typeof exception.stack === 'string') {\n      console.error('\\n', exception.stack)\n    }\n\n    throw exception\n  }\n\n  /**\n   * Method to check if a value is a class\n   *\n   * @param param Any kind of object to check if it's a class\n   * @returns {*|boolean}\n   */\n  static isClass(param) {\n    return param && param.constructor === Function\n  }\n\n  /**\n   * Returns the stack from the caller discarding the two first elements\n   * @returns {void|string|XML|*}\n   */\n  static getStack() {\n    // Save original Error.prepareStackTrace\n    var origPrepareStackTrace = Error.prepareStackTrace\n\n    // Override with function that just returns `stack`\n    Error.prepareStackTrace = function (_, stack) {\n      return stack\n    }\n\n    // Create a new `Error`, which automatically gets `stack`\n    var err = new Error()\n\n    // Evaluate `err.stack`, which calls our new `Error.prepareStackTrace`\n    var stack = err.stack\n\n    // Restore original `Error.prepareStackTrace`\n    Error.prepareStackTrace = origPrepareStackTrace\n\n    // Remove superfluous function call on stack\n    stack.shift()\n    stack.shift()\n\n    /*stack.forEach((frame) => {\n      console.log(frame.getFileName())\n    })*/\n\n    let frame = stack[0]\n\n    return frame.getFileName()//.replace(ModuleContainer.appDir, '')\n  }\n}\n"]}