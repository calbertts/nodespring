{"version":3,"sources":["../../src/core/NodeSpringUtil.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAQqB;;;;;;;;;;;;;;;4BAQH,MAAM;;;AAGpB,UAAI,OAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,0BAAtB,EAAkD,CAAlD,CAAP;;;AAHgB,aAMb,KAAK,KAAL,CAAW,GAAX,EAAgB,GAAhB,CAAoB,UAAC,GAAD,EAAS;;;AAGlC,eAAO,IAAI,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,EAA8B,IAA9B,EAAP,CAHkC;OAAT,CAApB,CAIJ,MAJI,CAIG,UAAC,GAAD,EAAS;;;AAGjB,eAAO,GAAP,CAHiB;OAAT,CAJV,CANoB;;;;;;;;;;0CAqBO;AAC3B,UAAI,UAAU,aAAG,iBAAH,CAAqB,gBAArB,EAAuC,EAAE,OAAO,GAAP,EAAzC,CAAV,CADuB;AAE3B,UAAI,YAAY,QAAQ,MAAR,CAFW;;AAI3B,cAAQ,GAAR,GAAc,YAAY;AACxB,gBAAQ,KAAR,CAAc,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAArC,CAAd,CADwB;AAExB,kBAAU,KAAV,CAAgB,eAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,IAAqC,IAArC,CAAhB,CAFwB;OAAZ,CAJa;AAQ3B,cAAQ,KAAR,GAAgB,QAAQ,GAAR,CARW;;;;;;;;;;;6CAgBG,WAAW;;AAEzC,UAAG,OAAO,UAAU,KAAV,KAAoB,QAA3B,EAAqC;AACtC,gBAAQ,KAAR,CAAc,IAAd,EAAoB,UAAU,KAAV,CAApB,CADsC;OAAxC;;;;;;;;;;;;AAFyC,YAgBnC,SAAN,CAhByC;;;;;;;;;;;;4BAyB5B,OAAO;AACpB,aAAO,SAAS,MAAM,WAAN,KAAsB,QAAtB,CADI;;;;SAtEH","file":"NodeSpringUtil.js","sourcesContent":["/**\n * NodeSpringUtil\n * @author calbertts\n */\n\nimport fs from 'fs'\nimport util from 'util'\n\nexport default class NodeSpringUtil {\n\n  /**\n   * Method to get the arguments' names\n   *\n   * @param func\n   * @returns {Array.<String>}\n   */\n  static getArgs (func) {\n\n    // First match everything inside the function argument parens.\n    let args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1]\n\n    // Split the arguments string into an array comma delimited.\n    return args.split(',').map((arg) => {\n\n      // Ensure no inline comments are parsed and trim the whitespace.\n      return arg.replace(/\\/\\*.*\\*\\//, '').trim()\n    }).filter((arg) => {\n\n      // Ensure no undefined values are added.\n      return arg\n    })\n  }\n\n  /**\n   * Send all the console.log/error output to a file\n   * This is pretty useful to see a synchronous log\n   */\n  static configureLoggingOut() {\n    let logFile = fs.createWriteStream('nodespring.log', { flags: 'w' });\n    let logStdout = process.stdout;\n\n    console.log = function () {\n      logFile.write(util.format.apply(null, arguments) + '\\n');\n      logStdout.write(util.format.apply(null, arguments) + '\\n');\n    }\n    console.error = console.log;\n  }\n\n  /**\n   * This method gives a specific format for exceptions and stop the application\n   *\n   * @param exception Exception to throw\n   */\n  static throwNodeSpringException(exception) {\n\n    if(typeof exception.stack === 'string') {\n      console.error('\\n', exception.stack)\n    }/* else {\n      console.error('\\n', exception.name, exception.message)\n      exception.stack.forEach((frame) => {\n        console.error('    at %s (%s:%d:%d)'\n          , frame.getFunctionName() || 'anonymous'\n          , frame.getFileName()\n          , frame.getLineNumber()\n          , frame.getColumnNumber()\n        )\n      })\n    }*/\n\n    throw exception\n  }\n\n  /**\n   * Method to check if a value is a class\n   *\n   * @param param Any kind of object to check if it's a class\n   * @returns {*|boolean}\n   */\n  static isClass(param) {\n    return param && param.constructor === Function\n  }\n}\n"]}