{"version":3,"sources":["../../src/middlewares/ExpressApp.js"],"names":[],"mappings":"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","file":"ExpressApp.js","sourcesContent":["/**\n * Express Middleware\n * @author calbertts\n */\n\nimport NodeSpringApp from '../core/NodeSpringApp'\nimport NodeSpringUtil from '../core/NodeSpringUtil'\nimport express from 'express'\nimport http from 'http'\n\n\nexport default class ExpressApp extends NodeSpringApp {\n\n  constructor(config) {\n    super(config)\n\n    this.socketListeners = {}\n    this.configExpressApp()\n  }\n\n  bindURL(method, url, callback) {\n    this.expressApp[method](url, callback)\n  }\n\n  addSocketListeners(namespace, socketListeners, instance) {\n    socketListeners.forEach((socketListenerData) => {\n      if(namespace in this.socketListeners) {\n        this.socketListeners[namespace].instance = instance\n        this.socketListeners[namespace].events[socketListenerData.eventName] = instance[socketListenerData.methodName]\n      } else {\n        this.socketListeners[namespace] = {\n          instance: instance,\n          events: {\n            [socketListenerData.eventName]: instance[socketListenerData.methodName]\n          }\n        }\n      }\n    })\n  }\n\n  getRequestParams(request, callback) {\n    let clientData = request.body || request.query\n    callback(clientData)\n  }\n\n  setContentTypeResponse(response, contentType) {\n    response.contentType(contentType || 'text/html')\n  }\n\n  sendJSONResponse(response, data) {\n    response.json(data)\n  }\n\n  sendDataResponse(response, data) {\n    response.send(data)\n  }\n\n  configExpressApp() {\n    const port = this.config.port\n    this.expressApp = express()\n\n    this.server = http.createServer(this.expressApp)\n\n    this.bindURL('get', '/', (req, res) => {\n      res.send('Hello World!');\n    })\n\n    this.server.listen(port, () => {\n      NodeSpringUtil.log('Server running at http://localhost:5000')\n    })\n  }\n\n  configureSocketListeners() {\n    this.io = require('socket.io')(this.server)\n\n    let socketListeners = this.socketListeners\n\n    for(let namespace in socketListeners) {\n      let namespaceData = socketListeners[namespace]\n      let scope = this.io.of(namespace)\n      namespaceData.instance.clientsNamespace = scope\n\n      scope.on('connection', (socket) => {\n        if('onConnection' in namespaceData.instance) {\n          namespaceData.instance.onConnection(socket, scope)\n        }\n\n        for(let eventName in namespaceData.events) {\n          socket.on(eventName, (data) => {\n            let instance = namespaceData.instance\n            let method = namespaceData.events[eventName]\n\n            method.call(instance, data, socket, scope)\n          })\n        }\n      })\n    }\n  }\n}"]}